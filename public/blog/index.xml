<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Blog on EETH - Blog</title><link>http://localhost:1313/blog/</link><description>Recent content in Blog on EETH - Blog</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><managingEditor>jayeshjoshi08jj@gmail.com (hkcfs)</managingEditor><webMaster>jayeshjoshi08jj@gmail.com (hkcfs)</webMaster><copyright>hkcfs</copyright><lastBuildDate>Wed, 15 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Artix Refind Clear Booster - most optmized setup</title><link>http://localhost:1313/blog/artix-refind-clear-booster/</link><pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate><author>jayeshjoshi08jj@gmail.com (hkcfs)</author><guid>http://localhost:1313/blog/artix-refind-clear-booster/</guid><description>&lt;h2 id="arch-linux--btw">Arch Linux – BTW&lt;/h2>
&lt;p>AAA, one of the most loved (cough, cough) OS, is not minimal anymore—or so I would say if I cared about systemd and all its nonsense. But I don&amp;rsquo;t see any issue with it. Yes, you&amp;rsquo;re right that systemd is more than just an init system, and with more unused code, more bugs may arise. Still, it&amp;rsquo;s the most popular init system and has been for the last 5 years or so.&lt;/p></description><content:encoded><![CDATA[<h2 id="arch-linux--btw">Arch Linux – BTW</h2>
<p>AAA, one of the most loved (cough, cough) OS, is not minimal anymore—or so I would say if I cared about systemd and all its nonsense. But I don&rsquo;t see any issue with it. Yes, you&rsquo;re right that systemd is more than just an init system, and with more unused code, more bugs may arise. Still, it&rsquo;s the most popular init system and has been for the last 5 years or so.</p>
<p>But today, we&rsquo;re not going to talk about systemd or Arch. Today is optimization day, where we optimize our Linux setup. One of the Linux distros we love to use is Arch, but what if Arch was made by the suckless team? We&rsquo;d get something like <a href="https://kisslinux.org/">KISS Linux</a>. However, for a somewhat cohesive experience, we should look at Artix Linux. You can use any init system you wish; I went with <a href="https://github.com/davmac314/dinit">dinit</a> as it is still the fastest, of course, after <a href="https://core.suckless.org/sinit/">sinit</a> and many others like <a href="https://github.com/krallin/tini">tini</a>, <a href="https://busybox.net/about.html">busybox init</a>, <a href="https://github.com/landley/toybox">toybox init</a>, and so on.</p>
<p>After a clean install with your favorite filesystem, XFS, or Btrfs for some crazy people, or even F2FS, we will continue with its optimization.</p>
<h3 id="first-basic-optimization"><strong>FIRST: Basic Optimization</strong></h3>
<p>In this section, I would like to focus on another more detailed resource: <a href="https://github.com/ventureoo/ARU">ARU</a>, the official Arch Linux guide on <a href="https://wiki.archlinux.org/title/Improving_performance">Improving Performance</a>, and the official Arch Linux boot process improvements on <a href="https://wiki.archlinux.org/title/Improving_performance/Boot_process">Improving Performance/Boot Process</a>. These are just a few examples.</p>
<p>For my own Intel Pentium N-series processor on a Dell system, I used the following <code>udev</code> rules:</p>





<pre tabindex="0"><code>/etc/udev/rules.d/60-ioschedulers.rules
# HDD
ACTION==&#34;add|change&#34;, KERNEL==&#34;sd[a-z]*&#34;, ATTR{queue/rotational}==&#34;1&#34;, ATTR{queue/scheduler}=&#34;bfq&#34;

# SSD
ACTION==&#34;add|change&#34;, KERNEL==&#34;sd[a-z]*|mmcblk[0-9]*&#34;, ATTR{queue/rotational}==&#34;0&#34;, ATTR{queue/scheduler}=&#34;bfq&#34;

# NVMe SSD
ACTION==&#34;add|change&#34;, KERNEL==&#34;nvme[0-9]*&#34;, ATTR{queue/rotational}==&#34;0&#34;, ATTR{queue/scheduler}=&#34;none&#34;</code></pre><p><strong>Setup irqbalance</strong></p>
<p>Next, we&rsquo;ll set up <a href="https://man.archlinux.org/man/irqbalance.1.en">irqbalance</a>. <code>irqbalance</code> is a daemon that distributes hardware interrupts across CPU cores to improve performance, especially on multi-core systems.</p>
<p>Let&rsquo;s install irqbalance either from the main repo or from the AUR</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">pacman -S irqbalance</span></span></code></pre></div><p>Now, just enable irqbalance, and here you go:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo systemctl <span class="nb">enable</span> irqbalance</span></span></code></pre></div><h4 id="a-zram-setup"><strong>A zram Setup</strong></h4>
<p>Now for a <code>zram</code> setup.
<a href="https://wiki.archlinux.org/title/Zram">zram</a> creates a compressed block device in RAM, which can be used for swap. This is faster than using a traditional swap partition or file, especially on systems with limited storage, though it uses RAM.</p>
<p>We will use <code>zram-generator</code> to setup <code>zram</code> thought you can use other methords like <code>udev</code> or <a href="https://aur.archlinux.org/packages/zramd/"><code>zramd</code></a></p>
<p>Let&rsquo;s install zram-generator first</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">pacman -S zram-generator</span></span></code></pre></div><p><strong>Using zram-generator</strong></p>
<p><code>zram-generator</code> provides <code>systemd-zram-setup@zramN.service</code> units to automatically initialize zram devices without users needing to enable or start the template or its instances.</p>
<p>To use it, install <code>zram-generator</code> and create <code>/etc/systemd/zram-generator.conf</code> with the following content:</p>





<pre tabindex="0"><code>[zram0]
zram-size = min(ram / 2, 4096)
compression-algorithm = zstd</code></pre><p><code>zram-size</code> is the size (in MiB) of the zram device. You can use <code>ram</code> to represent the total memory.</p>
<p><code>compression-algorithm</code> specifies the algorithm used to compress data in the zram device. Running <code>cat /sys/block/zram0/comp_algorithm</code> gives the available compression algorithms (as well as the current one included in brackets).</p>
<p>Then, run <code>daemon-reload</code> and start your configured <code>systemd-zram-setup@zramN.service</code> instance (with <code>N</code> matching the numerical instance-ID; in the example, it is <code>systemd-zram-setup@zram0.service</code>).</p>
<p>You can check the swap status of your configured <code>/dev/zramN</code> device(s) by reading the unit status of your <code>systemd-zram-setup@zramN.service</code> instance(s), using <code>zramctl</code>, or using <code>swapon</code>.</p>
<p>These are some general settings.</p>
<p>Let&rsquo;s get into Arch. First, stop <code>NetworkManager-wait-online.service</code> if you don&rsquo;t want to wait until your system get&rsquo;s network, or you cam set up <a href="https://wiki.archlinux.org/title/Iwd"><code>iwd</code></a> instead of <code>NetworkManager</code> if possible.</p>
<p>Basics only, no extra tools considered as bloat.</p>
<h4 id="configuring-pacmanconf"><strong>Configuring pacman.conf</strong></h4>





<pre tabindex="0"><code>#
# /etc/pacman.conf
#
# See the pacman.conf(5) manpage for option and repository directives

#
# GENERAL OPTIONS
#
[options]
# The following paths are commented out with their default values listed.
# If you wish to use different paths, uncomment and update the paths.
#RootDir     = /
#DBPath      = /var/lib/pacman/
#CacheDir    = /var/cache/pacman/pkg/
#LogFile     = /var/log/pacman.log
#GPGDir      = /etc/pacman.d/gnupg/
#HookDir     = /etc/pacman.d/hooks/
HoldPkg     = pacman glibc
#XferCommand = /usr/bin/curl -L -C - -f -o %o %u
#XferCommand = /usr/bin/wget --passive-ftp -c -O %o %u
#CleanMethod = KeepInstalled
Architecture = auto

# Pacman won&#39;t upgrade packages listed in IgnorePkg and members of IgnoreGroup
#IgnorePkg   =
#IgnoreGroup =

#NoUpgrade   =
#NoExtract   =

# Misc options
#UseSyslog
Color
ILoveCandy
#NoProgressBar
CheckSpace
VerbosePkgLists
ParallelDownloads = 8

# By default, pacman accepts packages signed by keys that its local keyring
# trusts (see pacman-key and its man page), as well as unsigned packages.
SigLevel    = Required DatabaseOptional
LocalFileSigLevel = Optional
#RemoteFileSigLevel = Required

# NOTE: You must run `pacman-key --init` before first using pacman; the local
# keyring can then be populated with the keys of all official Artix Linux
# packagers with `pacman-key --populate artix`.

#
# REPOSITORIES
#   - can be defined here or included from another file
#   - pacman will search repositories in the order defined here
#   - local/custom mirrors can be added here or in separate files
#   - repositories listed first will take precedence when packages
#     have identical names, regardless of version number
#   - URLs will have $repo replaced by the name of the current repo
#   - URLs will have $arch replaced by the name of the architecture
#
# Repository entries are of the format:
#       [repo-name]
#       Server = ServerName
#       Include = IncludePath
#
# The header [repo-name] is crucial - it must be present and
# uncommented to enable the repo.
#

# The gremlins repositories are disabled by default. To enable, uncomment the
# repo name header and Include lines. You can add preferred servers immediately
# after the header, and they will be used before the default mirrors.

#[system-gremlins]
#Include = /etc/pacman.d/mirrorlist

[system]
Include = /etc/pacman.d/mirrorlist

#[world-gremlins]
#Include = /etc/pacman.d/mirrorlist

[world]
Include = /etc/pacman.d/mirrorlist

#[galaxy-gremlins]
#Include = /etc/pacman.d/mirrorlist

[galaxy]
Include = /etc/pacman.d/mirrorlist

[omniverse]
Server = https://artix.sakamoto.pl/omniverse/$arch
Server = https://eu-mirror.artixlinux.org/omniverse/$arch
Server = https://omniverse.artixlinux.org/$arch

# If you want to run 32-bit applications on your x86_64 system,
# enable the lib32 repositories as required here.

#[lib32-gremlins]
#Include = /etc/pacman.d/mirrorlist

[lib32]
Include = /etc/pacman.d/mirrorlist

# custom cf kernel repo
[repo-ck]
#Server = https://mirror.lesviallon.fr/$repo/os/$arch
Server = http://repo-ck.com/$arch

# Arch
[extra]
Include = /etc/pacman.d/mirrorlist-arch

[multilib]
Include = /etc/pacman.d/mirrorlist-arch

# enabling chaotic-aur
[chaotic-aur]
Include = /etc/pacman.d/chaotic-mirrorlist

# An example of a custom package repository. See the pacman manpage for
# tips on creating your own repositories.
#[custom]
#SigLevel = Optional TrustAll
#Server = file:///home/custompkgs</code></pre><p>Okay, what was added? Custom repo like the official Arch repo. Some people believe it may cause issues, but after 2 years of using this system, I haven&rsquo;t encountered any problems.</p>
<p>Here is what was added:</p>





<pre tabindex="0"><code>Color
ILoveCandy
CheckSpace
VerbosePkgLists
ParallelDownloads = 8 # very important; configure according to your network speed</code></pre><p>Now, the <code>makepkg.conf</code>:</p>





<pre tabindex="0"><code>#!/hint/bash
#
# /etc/makepkg.conf
#

#########################################################################
# SOURCE ACQUISITION
#########################################################################
#
#-- The download utilities that makepkg should use to acquire sources
#  Format: &#39;protocol::agent&#39;
DLAGENTS=(&#39;file::/usr/bin/curl -qgC - -o %o %u&#39;
          &#39;ftp::/usr/bin/curl -qgfC - --ftp-pasv --retry 3 --retry-delay 3 -o %o %u&#39;
          &#39;http::/usr/bin/curl -qgb &#34;&#34; -fLC - --retry 3 --retry-delay 3 -o %o %u&#39;
          &#39;https::/usr/bin/curl -qgb &#34;&#34; -fLC - --retry 3 --retry-delay 3 -o %o %u&#39;
          &#39;rsync::/usr/bin/rsync --no-motd -z %u %o&#39;
          &#39;scp::/usr/bin/scp -C %u %o&#39;)

# Other common tools:
# /usr/bin/snarf
# /usr/bin/lftpget -c
# /usr/bin/wget

#-- The package required by makepkg to download VCS sources
#  Format: &#39;protocol::package&#39;
VCSCLIENTS=(&#39;bzr::breezy&#39;
            &#39;fossil::fossil&#39;
            &#39;git::git&#39;
            &#39;hg::mercurial&#39;
            &#39;svn::subversion&#39;)

#########################################################################
# ARCHITECTURE, COMPILE FLAGS
#########################################################################
#
CARCH=&#34;x86_64&#34;
CHOST=&#34;x86_64-pc-linux-gnu&#34;

#-- Compiler and Linker Flags
#CPPFLAGS=&#34;&#34;
CFLAGS=&#34;-march=native -mtune=native -O2 -pipe -fstack-protector-strong --param=ssp-buffer-size=4 -fno-plt \
        -Wp,-D_FORTIFY_SOURCE=2 -Wformat -Werror=format-security \
        -fstack-clash-protection -fcf-protection&#34;
CXXFLAGS=&#34;${CFLAGS}&#34;
LDFLAGS=&#34;-Wl,-O1,--sort-common,--as-needed,-z,relro,-z,now&#34;
LTOFLAGS=&#34;-flto=auto&#34;
RUSTFLAGS=&#34;-C opt-level=2 -C target-cpu=native&#34;
#-- Make Flags: change this for DistCC/SMP systems
MAKEFLAGS=&#34;-j$(getconf _NPROCESSORS_ONLN) --quiet&#34;
#-- Debugging flags
DEBUG_CFLAGS=&#34;-g&#34;
DEBUG_CXXFLAGS=&#34;$DEBUG_CFLAGS&#34;
#DEBUG_RUSTFLAGS=&#34;-C debuginfo=2&#34;

#########################################################################
# BUILD ENVIRONMENT
#########################################################################
#
# Makepkg defaults: BUILDENV=(!distcc !color !ccache check !sign)
#  A negated environment option will do the opposite of the comments below.
#
#-- distcc:   Use the Distributed C/C++/ObjC compiler
#-- color:    Colorize output messages
#-- ccache:   Use ccache to cache compilation
#-- check:    Run the check() function if present in the PKGBUILD
#-- sign:     Generate PGP signature file
#
BUILDENV=(!distcc color !ccache check !sign)
#
#-- If using DistCC, your MAKEFLAGS will also need modification. In addition,
#-- specify a space-delimited list of hosts running in the DistCC cluster.
#DISTCC_HOSTS=&#34;&#34;
#
#-- Specify a directory for package building.
BUILDDIR=/tmp/makepkg

#########################################################################
# GLOBAL PACKAGE OPTIONS
#   These are default values for the options=() settings
#########################################################################
#
# Makepkg defaults: OPTIONS=(!strip docs libtool staticlibs emptydirs !zipman !purge !debug !lto)
#  A negated option will do the opposite of the comments below.
#
#-- strip:      Strip symbols from binaries/libraries
#-- docs:       Save doc directories specified by DOC_DIRS
#-- libtool:    Leave libtool (.la) files in packages
#-- staticlibs: Leave static library (.a) files in packages
#-- emptydirs:  Leave empty directories in packages
#-- zipman:     Compress manual (man and info) pages in MAN_DIRS with gzip
#-- purge:      Remove files specified by PURGE_TARGETS
#-- debug:      Add debugging flags as specified in DEBUG_* variables
#-- lto:        Add compile flags for building with link time optimization
#
OPTIONS=(strip docs !libtool !staticlibs emptydirs zipman purge !debug !lto)

#-- File integrity checks to use. Valid: md5, sha1, sha224, sha256, sha384, sha512, b2
INTEGRITY_CHECK=(sha256)
#-- Options to be used when stripping binaries. See `man strip&#39; for details.
STRIP_BINARIES=&#34;--strip-all&#34;
#-- Options to be used when stripping shared libraries. See `man strip&#39; for details.
STRIP_SHARED=&#34;--strip-unneeded&#34;
#-- Options to be used when stripping static libraries. See `man strip&#39; for details.
STRIP_STATIC=&#34;--strip-debug&#34;
#-- Manual (man and info) directories to compress (if zipman is specified)
MAN_DIRS=({usr{,/local}{,/share},opt/*}/{man,info})
#-- Doc directories to remove (if !docs is specified)
DOC_DIRS=(usr/{,local/}{,share/}{doc,gtk-doc} opt/*/{doc,gtk-doc})
#-- Files to be removed from all packages (if purge is specified)
PURGE_TARGETS=(usr/{,share}/info/dir .packlist *.pod)
#-- Directory to store source code in for debug packages
DBGSRCDIR=&#34;/usr/src/debug&#34;

#########################################################################
# PACKAGE OUTPUT
#########################################################################
#
# Default: put built package and cached source in build directory
#
#-- Destination: specify a fixed directory where all packages will be placed
#PKGDEST=/home/packages
#-- Source cache: specify a fixed directory where source files will be cached
#SRCDEST=/home/sources
#-- Source packages: specify a fixed directory where all src packages will be placed
#SRCPKGDEST=/home/srcpackages
#-- Log files: specify a fixed directory where all log files will be placed
#LOGDEST=/home/makepkglogs
#-- Packager: name/email of the person or organization building packages
#PACKAGER=&#34;John Doe &lt;john@doe.com&gt;&#34;
#-- Specify a key to use for package signing
#GPGKEY=&#34;&#34;

#########################################################################
# COMPRESSION DEFAULTS
#########################################################################
#
COMPRESSGZ=(pigz -c -f -n)
COMPRESSBZ2=(pbzip2 -c -f)
COMPRESSXZ=(xz -T &#34;$(getconf _NPROCESSORS_ONLN)&#34; -c -z --best -)
COMPRESSZST=(zstd -c -z -q --ultra -T0 -22 -)
COMPRESSLRZ=(lrzip -9 -q)
COMPRESSLZO=(lzop -q --best)
COMPRESSZ=(compress -c -f)
COMPRESSLZ4=(lz4 -q --best)
COMPRESSLZ=(lzip -c -f)

#########################################################################
# EXTENSION DEFAULTS
#########################################################################
#
PKGEXT=&#39;.pkg.tar.zst&#39;
SRCEXT=&#39;.src.tar.gz&#39;

#########################################################################
# OTHER
#########################################################################
#
#-- Command used to run pacman as root, instead of trying sudo and su
#PACMAN_AUTH=()</code></pre><p><strong>Explanation of <code>CFLAGS</code> Options:</strong></p>
<ul>
<li><code>-march=native</code>: Optimizes the code for the specific CPU architecture of the host machine.</li>
<li><code>-mtune=native</code>: Tunes the code for the specific CPU model of the host machine.</li>
<li><code>-O2</code>: Enables a moderate level of optimization.</li>
<li><code>-pipe</code>: Uses pipes rather than temporary files for communication between different compilation stages.</li>
<li><code>-fstack-protector-strong</code>: Adds stack protection to check for buffer overflows.</li>
<li><code>--param=ssp-buffer-size=4</code>: Sets the buffer size for stack protection.</li>
<li><code>-fno-plt</code>: Avoids using the Procedure Linkage Table for function calls.</li>
<li><code>-Wp,-D_FORTIFY_SOURCE=2</code>: Enables additional security checks.</li>
<li><code>-Wformat</code>: Enables warnings for printf-like functions.</li>
<li><code>-Werror=format-security</code>: Treats format security warnings as errors.</li>
<li><code>-fstack-clash-protection</code>: Adds protection against stack clash attacks.</li>
<li><code>-fcf-protection</code>: Adds control flow protection.</li>
</ul>
<p>Yes, compression has been increased, and that is that, but it may significantly improve disk storage requirements.</p>
<p>Now, let&rsquo;s talk about the filesystem. Here, I am using Btrfs, but before that, XFS was the way to go. I still remember snapshots and other things, so Btrfs is the only option for me, until bcachefs is good. Here are my custom options; no new features were added, but IDR (I DON&rsquo;T REMEMBER).</p>
<p>Here is my <code>fstab</code>:</p>





<pre tabindex="0"><code># Static information about the filesystems.
# See fstab(5) for details.

# &lt;file system&gt; &lt;dir&gt; &lt;type&gt; &lt;options&gt; &lt;dump&gt; &lt;pass&gt;
# /dev/sda2 UUID=c386b909-59af-42d1-93a0-1d25fd117c87
LABEL=ROOT          	/         	btrfs     	rw,noatime,compress=zstd:5,nossd,space_cache=v2,autodefrag,commit=120,subvol=/artix/@	0 0

# /dev/sda2 UUID=c386b909-59af-42d1-93a0-1d25fd117c87
LABEL=ROOT          	/var      	btrfs     	rw,noatime,compress=zstd:5,nossd,space_cache=v2,autodefrag,commit=120,subvol=/artix/@var	0 0

# /dev/sda2 UUID=c386b909-59af-42d1-93a0-1d25fd117c87
LABEL=ROOT          	/home     	btrfs     	rw,noatime,compress=zstd:5,nossd,space_cache=v2,autodefrag,commit=120,subvol=/artix/@home	0 0

# /dev/sda2 UUID=c386b909-59af-42d1-93a0-1d25fd117c87
LABEL=ROOT          	/.snapshots	btrfs     	rw,noatime,compress=zstd:5,nossd,space_cache=v2,autodefrag,commit=120,subvol=/artix/@snapshots	0 0

# /dev/sda1 UUID=4089-8087
LABEL=EFIBOOT       	/boot     	vfat      	rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=ascii,shortname=mixed,utf8,errors=remount-ro	0 0</code></pre><p><strong>Explanation of Btrfs Options in <code>fstab</code>:</strong></p>
<ul>
<li><code>noatime</code>: Disables the updating of access times on files and directories, which can improve performance.</li>
<li><code>compress=zstd:5</code>: Enables compression using the Zstandard algorithm at level 5.</li>
<li><code>nossd</code>: Disables SSD-specific optimizations.</li>
<li><code>space_cache=v2</code>: Enables the space cache version 2, which improves performance for free space tracking.</li>
<li><code>autodefrag</code>: Automatically defragments files as they are modified.</li>
<li><code>commit=120</code>: Sets the commit interval to 120 seconds, reducing the frequency of metadata writes.</li>
</ul>
<p>Yes, I have cleanly divided into subvolumes, and there is another subvolume named <code>backup</code> which is not mounted by default. It is used to make a complete snapshot of the <code>artix</code> subvolume. This kind of <code>fstab</code> with the label is inspired by <a href="https://github.com/ChrisTitusTech/ArchTitus/">Chris Titus (archtitus)</a>.</p>
<p>And how can I forget about <a href="https://wiki.archlinux.org/title/Booster">Booster</a>, an init system? If you are not sure what I am talking about, check out this Arch Linux documentation for <a href="https://wiki.archlinux.org/title/Arch_boot_process#initramfs">initramfs</a>, which not only explains it very well but also provides you with other options to test. It&rsquo;s pretty good, but not as good as the Gentoo wiki, which is on another level.</p>
<p>Here is my <code>booster.yaml</code> config:</p>





<pre tabindex="0"><code>#universal: false
modules: btrfs,i915
compression: zstd
# zstd -9 -T0
#mount_timeout: 30s
#strip: true
#extra_files: fsck,fsck.btrfs #,vim,/usr/share/vim/vim82/
#vconsole: true</code></pre><p>It is not very complex, but it works. Here, I am not using <a href="https://github.com/Zile995/booster-um">booster-um</a> to make a custom UKI image for reasons, but the entire Booster initramfs works fine and has never caused issues like <a href="https://wiki.archlinux.org/title/Mkinitcpio">mkinitcpio</a> or <a href="https://wiki.archlinux.org/title/Dracut">dracut</a> in Arch Linux with the <a href="https://github.com/clearlinux-pkgs/linux">Clear Linux kernel</a>. I am using chaotic-aur to pull the kernel. Yes, I am not a neckbeard man waiting to compile the Linux kernel on an underpowered netbook-type laptop from the 2010s. But hey, it works. I have two kernels just as a safety measure, and I think everyone should too: my main Clear Linux kernel and the linux-lts. Before you mention it, I am on an Intel setup and have used custom kernels like <a href="https://liquorix.net/">Liquorix</a> and <a href="https://github.com/Frogging-Family/linux-tkg">tkg</a>, but they were never that very stable and did not improve performance that much. The same cannot be said about the Clear Linux kernel, which did improve my system performance by 10-12%. Not massive, but still noticeable.</p>
<p>But the kernel is not the end-all-be-all; the options passed to the kernel are just as important. Here are my custom options:</p>





<pre tabindex="0"><code>root=LABEL=ROOT rootflags=subvol=/artix/@,noatime,compress=zstd:5,nossd,space_cache=v2,autodefrag,commit=120 rw loglevel=0 console=tty2 udev.log_level=0 vt.global_cursor_default=0 mitigations=off nowatchdog msr.allow_writes=on pcie_aspm=force module.sig_unenforce intel_idle.max_cstate=1 cryptomgr.notests initcall_debug intel_iommu=igfx_off no_timer_check noreplace-smp page_alloc.shuffle=1 rcupdate.rcu_expedited=1 tsc=reliable tpm_tis.interrupts=0</code></pre><p><strong>Explanation of Kernel Options:</strong></p>
<ul>
<li><code>root=LABEL=ROOT</code>: Specifies the root filesystem by label.</li>
<li><code>rootflags=subvol=/artix/@,noatime,compress=zstd:5,nossd,space_cache=v2,autodefrag,commit=120</code>: Sets various Btrfs options for the root filesystem.</li>
<li><code>rw</code>: Mounts the root filesystem as read-write.</li>
<li><code>loglevel=0</code>: Disables kernel log messages.</li>
<li><code>console=tty2</code>: Sets the console to tty2.</li>
<li><code>udev.log_level=0</code>: Disables udev log messages.</li>
<li><code>vt.global_cursor_default=0</code>: Disables the global cursor default.</li>
<li><code>mitigations=off</code>: Disables CPU mitigations (more on this below).</li>
<li><code>nowatchdog</code>: Disables the watchdog timer.</li>
<li><code>msr.allow_writes=on</code>: Allows writes to MSR registers.</li>
<li><code>pcie_aspm=force</code>: Forces PCIe ASPM (Active State Power Management).</li>
<li><code>module.sig_unenforce</code>: Disables module signature enforcement.</li>
<li><code>intel_idle.max_cstate=1</code>: Limits the maximum C-state for Intel CPUs.</li>
<li><code>cryptomgr.notests</code>: Disables cryptographic manager tests.</li>
<li><code>initcall_debug</code>: Enables initcall debugging.</li>
<li><code>intel_iommu=igfx_off</code>: Disables Intel IOMMU for integrated graphics.</li>
<li><code>no_timer_check</code>: Disables timer checks.</li>
<li><code>noreplace-smp</code>: Disables SMP replacement.</li>
<li><code>page_alloc.shuffle=1</code>: Enables page allocation shuffling.</li>
<li><code>rcupdate.rcu_expedited=1</code>: Enables expedited RCU updates.</li>
<li><code>tsc=reliable</code>: Marks the TSC (Time Stamp Counter) as reliable.</li>
<li><code>tpm_tis.interrupts=0</code>: Disables TPM TIS interrupts.</li>
</ul>
<p>There is a controversial option, <code>mitigations=off</code>, which is very dangerous. For my old system, it hampers performance a lot, so I keep it disabled.</p>
<h3 id="more-info-on-mitigations"><strong>More Info on Mitigations:</strong></h3>
<p>Mitigations are security features introduced to protect against various CPU vulnerabilities, such as Spectre and Meltdown. Disabling mitigations can improve performance but also exposes the system to these vulnerabilities. There are two main types of mitigations:</p>
<ol>
<li><strong>Spectre Mitigations</strong>: These protect against speculative execution side-channel attacks.</li>
<li><strong>Meltdown Mitigations</strong>: These protect against out-of-order execution side-channel attacks.</li>
</ol>
<p>Disabling mitigations is generally not recommended unless you are aware of the risks and have a specific reason to do so.</p>
<p>How can we forget about <a href="https://wiki.archlinux.org/title/REFInd">rEFInd</a>, a bootloader? If you want to know more about bootloaders, refer to the Gentoo article for great detail, but the Arch wiki is also great.</p>
<p>Though a bootloader is not important and does slow down the system, as I am not using the UKI image of the kernel, we will use a bootloader. I have installed the bootloader to <code>/ESP/BOOT/</code>, which is the default place where any UEFI system looks for it.</p>
<p>Some more miscellaneous configurations:</p>
<h3 id="changing-the-journals-size"><strong>Changing the Journal&rsquo;s Size</strong></h3>
<p>Systemd&rsquo;s system journal&rsquo;s size can go out of control. There are some things you can do to keep it in control. If you wish to, you can also completely disable this, but I like to keep some just for emergency purposes:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">journalctl --vacuum-size<span class="o">=</span>10M
</span></span><span class="line"><span class="ln">2</span><span class="cl">journalctl --vacuum-time<span class="o">=</span>2weeks</span></span></code></pre></div><p>Never forget to install your CPU&rsquo;s microcode.</p>
<p>For Intel:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">pacman -S intel-ucode</span></span></code></pre></div><p>For AMD:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">pacman -S amd-ucode</span></span></code></pre></div><p>For other systems, I am not aware of, but you can look around. I do not believe there are any, but do quote me on that.</p>
<p>It is not all about your system. If you have slow internet or badly configured mirrors, it may cause issues on your system. Change the default mirror of Artix Linux to your specific country in the <code>/etc/pacman.d/mirrorlist</code>, and if you are on Arch or have the Arch mirror, run this:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl"><span class="nv">iso</span><span class="o">=</span><span class="k">$(</span>curl -4 ifconfig.co/country-iso<span class="k">)</span> <span class="o">&amp;&amp;</span> reflector -a <span class="m">48</span> -c <span class="nv">$iso</span> -f <span class="m">5</span> -l <span class="m">20</span> --sort rate --save /etc/pacman.d/mirrorlist</span></span></code></pre></div><p><strong>Explanation of the Command:</strong></p>
<ul>
<li><code>iso=$(curl -4 ifconfig.co/country-iso)</code>: Fetches the country ISO code using <code>curl</code>.</li>
<li><code>reflector -a 48 -c $iso -f 5 -l 20 --sort rate --save /etc/pacman.d/mirrorlist</code>: Uses <code>reflector</code> to update the mirrorlist with the fastest mirrors from the specified country.
<ul>
<li><code>-a 48</code>: Sets the age of the mirrors to 48 hours.</li>
<li><code>-c $iso</code>: Specifies the country ISO code.</li>
<li><code>-f 5</code>: Sets the number of fallback mirrors.</li>
<li><code>-l 20</code>: Limits the number of mirrors to 20.</li>
<li><code>--sort rate</code>: Sorts the mirrors by rate.</li>
<li><code>--save /etc/pacman.d/mirrorlist</code>: Saves the updated mirrorlist to the specified file.</li>
</ul>
</li>
</ul>
<h3 id="setup-swap-in-arch-linux-on-optswap"><strong>Setup Swap in Arch Linux on <code>/opt/swap</code></strong></h3>
<p>To set up a swap file on <code>/opt/swap</code>, follow these steps:</p>
<ol>
<li>Create the swap file:</li>
</ol>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo fallocate -l 2G /opt/swap</span></span></code></pre></div><ol start="2">
<li>Set the correct permissions:</li>
</ol>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo chmod <span class="m">600</span> /opt/swap</span></span></code></pre></div><ol start="3">
<li>Set up the swap space:</li>
</ol>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo mkswap /opt/swap</span></span></code></pre></div><ol start="4">
<li>Enable the swap file:</li>
</ol>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo swapon /opt/swap</span></span></code></pre></div><ol start="5">
<li>Verify that the swap file is active:</li>
</ol>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo swapon --show</span></span></code></pre></div><ol start="6">
<li>Make the change permanent by adding the following line to <code>/etc/fstab</code>:</li>
</ol>





<pre tabindex="0"><code>/opt/swap none swap sw 0 0</code></pre><h3 id="setup-swap-in-arch-linux-with-btrfs-using-the-btrfs-command-to-make-a-swap-file-at-optswaps"><strong>Setup Swap in Arch Linux with Btrfs Using the Btrfs Command to Make a Swap File at <code>/opt/swaps</code></strong></h3>
<p>To set up a swap file on <code>/opt/swaps</code> using Btrfs, follow these steps:</p>
<ol>
<li>Create the swap file:</li>
</ol>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo btrfs filesystem mkswapfile --size 2G --uuid clear /opt/swaps</span></span></code></pre></div><ol start="2">
<li>Enable the swap file:</li>
</ol>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo swapon /opt/swaps</span></span></code></pre></div><ol start="3">
<li>Verify that the swap file is active:</li>
</ol>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo swapon --show</span></span></code></pre></div><ol start="4">
<li>Make the change permanent by adding the following line to <code>/etc/fstab</code>:</li>
</ol>





<pre tabindex="0"><code>/opt/swaps none swap sw 0 0</code></pre><p>For people who do not have an SSD or are not running a system from a USB flash drive, if you are, then stop using it as it may kill your USB drive faster. But what can I say? I have used a Linux install from my USB drive for 5 years, after which it failed. Your mileage may vary, but if you are using F2FS, trust me, the options in this are on another level. But if you are using a mini USB flash drive which has a very simple controller and does not have features like <a href="https://en.wikipedia.org/wiki/Wear_leveling">wear leveling</a>, then use something else. Something like <a href="https://en.wikipedia.org/wiki/YAFFS">YAFFS</a> or <a href="https://en.wikipedia.org/wiki/UBIFS">UBIFS</a> is great. Just have a look at the <a href="https://en.wikipedia.org/wiki/Flash_file_system">flash file system</a> article on Wikipedia.</p>
<p>But on topic, then use these options and commands in Btrfs will help you a lot:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">btrfs filesystem defragment -r -czstd /</span></span></code></pre></div><p><strong>Explanation of the Command:</strong></p>
<ul>
<li><code>btrfs filesystem defragment -r -czstd /</code>: Defragments the filesystem recursively with Zstandard compression.</li>
</ul>
<p>Also, add this to your <code>fstab</code>:</p>





<pre tabindex="0"><code>autodefrag</code></pre><h3 id="btrfs-scrub"><strong>Btrfs Scrub:</strong></h3>
<p>The <a href="https://btrfs.wiki.kernel.org/index.php/Glossary">Btrfs Wiki Glossary</a> says that Btrfs scrub is &ldquo;[a]n online file system checking tool. Reads all the data and metadata on the file system and uses checksums and the duplicate copies from RAID storage to identify and repair any corrupt data.&rdquo;</p>
<p>Try to run this per week to check for any errors in Btrfs:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">btrfs scrub start /</span></span></code></pre></div><h2 id="deduplication">Deduplication:</h2>
<p>Not only for HDDs, but Btrfs deduplication can also be used.</p>
<p>Using copy-on-write, Btrfs is able to copy files or whole subvolumes without actually copying the data. However, whenever a file is altered, a new proper copy is created. Deduplication takes this a step further by actively identifying blocks of data that share common sequences and combining them into an extent with the same copy-on-write semantics.</p>
<p>Tools dedicated to deduplicating a Btrfs-formatted partition include <a href="https://github.com/markfasheh/duperemove">duperemove</a> and <a href="https://github.com/Zygo/bees">bees</a>. One may also want to merely deduplicate data on a file-based level instead, using tools like <code>rmlint</code>, <code>rdfind</code>, <code>jdupes</code>, or <code>dduper</code>. For an overview of available features of those programs and additional information, have a look at the <a href="https://btrfs.wiki.kernel.org/index.php/Deduplication">upstream Wiki entry</a>.</p>
<h3 id="difference-between-bees-and-duperemove"><strong>Difference Between Bees and Duperemove:</strong></h3>
<ul>
<li>
<p><strong>Bees</strong> is a block-oriented userspace deduplication agent designed to scale up to large Btrfs filesystems. It is an offline dedupe combined with an incremental data scan capability to minimize the time data spends on disk from write to dedupe.</p>
</li>
<li>
<p><strong>Duperemove</strong> is a simple tool for finding duplicated extents and submitting them for deduplication. When given a list of files, it hashes their contents on an extent-by-extent basis and compares those hashes to each other, finding and categorizing extents that match each other. Optionally, a per-block hash can be applied for further duplication lookup. When given the <code>-d</code> option, duperemove will submit those extents for deduplication using the Linux kernel <code>FIDEDUPRANGE</code> ioctl.</p>
</li>
</ul>
<p>Duperemove can store the hashes it computes in a &lsquo;hashfile&rsquo;. If given an existing hashfile, duperemove will only compute hashes for those files that have changed since the last run. Thus, you can run duperemove repeatedly on your data as it changes without having to re-checksum unchanged data.</p>
<p>Duperemove can also take input from the <code>fdupes</code> program.</p>
<p>See the duperemove man page for further details about running duperemove.</p>
<p><strong>Deduplication:</strong></p>
<blockquote>
<p>Going by the definition in the context of filesystems, deduplication is a process of looking up identical data blocks tracked separately and creating a shared logical link while removing one of the copies of the data blocks. This leads to data space savings while increasing metadata consumption.</p>
</blockquote>
<p>There are two main deduplication types:</p>
<ol>
<li><strong>In-band (sometimes also called online)</strong>: All newly written data are considered for deduplication before writing.</li>
<li><strong>Out-of-band (sometimes also called offline)</strong>: Data for deduplication have to be actively looked for and deduplicated by the user application.</li>
</ol>
<p>Both have their pros and cons. Btrfs implements only the out-of-band type.</p>
<p>Btrfs provides the basic building blocks for deduplication, allowing other tools to choose the strategy and scope of the deduplication. There are multiple tools that take different approaches to deduplication, offer additional features, or make trade-offs. The following table lists tools that are known to be up-to-date, maintained, and widely used.</p>
<table>
  <thead>
      <tr>
          <th>Name</th>
          <th>File Based</th>
          <th>Block Based</th>
          <th>Incremental</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>BEES</td>
          <td>No</td>
          <td>Yes</td>
          <td>Yes</td>
      </tr>
      <tr>
          <td>duperemove</td>
          <td>Yes</td>
          <td>No</td>
          <td>Yes</td>
      </tr>
  </tbody>
</table>
<p><strong>File-Based Deduplication:</strong></p>
<p>The tool takes a list of files and tries to find duplicates among data only from these files. This is suitable, for example, for files that originated from the same base image or source of a reflinked file. Optionally, the tool could track a database of hashes and allow deduplicating blocks from more files or use that for repeated runs and update the database incrementally.</p>
<p><strong>Block-Based Deduplication:</strong></p>
<p>The tool typically scans the filesystem and builds a database of file block hashes, then finds candidate files and deduplicates the ranges. The hash database is kept as an ordinary file and can be scaled according to the needs.</p>
<p>As the files change, the hash database may get out of sync, and the scan has to be done repeatedly.</p>
<p><strong>Safety of Block Comparison:</strong></p>
<p>The deduplication inside the filesystem is implemented as an ioctl that takes a source file, destination file, and the range. The blocks from both files are compared for an exact match before merging to the same range (i.e., there’s no hash-based comparison). Pages representing the extents in memory are locked prior to deduplication and prevent concurrent modification by buffered writes or mmapped writes. Blocks are compared byte by byte and not using any hash-based approach, i.e., the existing checksums are not used.</p>
<p><strong>Limitations, Compatibility:</strong></p>
<p>Files that are subject to deduplication must have the same status regarding COW, i.e., both regular COW files with checksums, or both NOCOW, or files that are COW but don’t have checksums (NODATASUM attribute is set).</p>
<p>If the deduplication is in progress on any file in the filesystem, the send operation cannot be started as it relies on the extent layout being unchanged.</p>
<h3 id="general-settings-in-arch-linux-to-improve-performance">General Settings in Arch Linux to Improve Performance:</h3>
<ol>
<li><strong>Enable TRIM for SSDs</strong>: Ensure that TRIM is enabled for your SSD to maintain performance. You can check if TRIM is enabled with:</li>
</ol>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo fstrim -v /</span></span></code></pre></div><ol start="2">
<li><strong>Optimize Swappiness</strong>: Reduce the swappiness value to make the system less aggressive in using swap space. Edit <code>/etc/sysctl.d/99-sysctl.conf</code> and add:</li>
</ol>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">vm.swappiness<span class="o">=</span><span class="m">10</span></span></span></code></pre></div><p>Then apply the changes:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo sysctl --system</span></span></code></pre></div><ol start="3">
<li><strong>Use ZRAM</strong>: ZRAM can help improve performance by using compressed RAM as swap space. Install <code>zramswap</code>:</li>
</ol>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo pacman -S zramswap</span></span></code></pre></div><p>Then enable and start the <code>zramswap</code> service:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo systemctl <span class="nb">enable</span> zramswap
</span></span><span class="line"><span class="ln">2</span><span class="cl">sudo systemctl start zramswap</span></span></code></pre></div><ol start="4">
<li><strong>Optimize I/O Scheduler</strong>: Choose an appropriate I/O scheduler for your storage device. For SSDs, <code>noop</code> or <code>deadline</code> is recommended. For HDDs, <code>cfq</code> is a good choice. You can set the I/O scheduler with:</li>
</ol>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">echo</span> cfq <span class="p">|</span> sudo tee /sys/block/sda/queue/scheduler</span></span></code></pre></div><ol start="5">
<li>
<p><strong>Enable Lazytime Mount Option</strong>: Use the <code>lazytime</code> mount option to reduce write operations. Edit <code>/etc/fstab</code> and add <code>lazytime</code> to the mount options for your filesystems.</p>
</li>
<li>
<p><strong>Optimize Kernel Parameters</strong>: Tune kernel parameters for better performance. Edit <code>/etc/sysctl.d/99-sysctl.conf</code> and add:</p>
</li>
</ol>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">net.core.rmem_max<span class="o">=</span><span class="m">16777216</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">net.core.wmem_max<span class="o">=</span><span class="m">16777216</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">net.ipv4.tcp_rmem<span class="o">=</span><span class="m">4096</span> <span class="m">87380</span> <span class="m">16777216</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">net.ipv4.tcp_wmem<span class="o">=</span><span class="m">4096</span> <span class="m">16384</span> <span class="m">16777216</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">net.ipv4.tcp_window_scaling<span class="o">=</span><span class="m">1</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">net.ipv4.tcp_timestamps<span class="o">=</span><span class="m">1</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl">net.ipv4.tcp_sack<span class="o">=</span><span class="m">1</span></span></span></code></pre></div><p>Then apply the changes:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo sysctl --system</span></span></code></pre></div><p>With some of these options, your own Artix system will be more performant—no guarantees.</p>
<p>These are just a few things, but for more performance information, please look at these resources:</p>
<ul>
<li><a href="https://www.devroom.io/2024/02/08/arch-linux-improve-boot-time-performance/">Arch Linux: Improve Boot Time Performance</a></li>
<li><a href="https://wiki.archlinux.org/title/Improving_performance">Arch Wiki: Improving Performance</a></li>
<li><a href="https://wiki.archlinux.org/title/Sysctl#Virtual_memory">Arch Wiki: Sysctl - Virtual Memory</a></li>
<li><a href="https://wiki.archlinux.org/title/Swap#Performance">Arch Wiki: Swap - Performance</a></li>
<li><a href="https://wiki.archlinux.org/title/Core_dump#Disabling_automatic_core_dumps">Arch Wiki: Core Dump - Disabling Automatic Core Dumps</a></li>
<li><a href="https://wiki.archlinux.org/title/Improving_performance/Boot_process">Arch Wiki: Improving Performance/Boot Process</a></li>
<li><a href="https://www.reddit.com/r/archlinux/comments/rz6294/arch_linux_laptop_optimization_guide_for">Reddit: Arch Linux Laptop Optimization Guide</a></li>
<li><a href="https://gist.github.com/dante-robinson/cd620c7283a6cc1fcdd97b2d139b72fa">GitHub Gist: Arch Linux Optimization</a></li>
</ul>
]]></content:encoded></item><item><title>How I Make My Blogs</title><link>http://localhost:1313/blog/how-i-make-my-blogs/</link><pubDate>Thu, 05 Dec 2024 00:00:00 +0000</pubDate><author>jayeshjoshi08jj@gmail.com (hkcfs)</author><guid>http://localhost:1313/blog/how-i-make-my-blogs/</guid><description>&lt;h1 id="as-of-today-my-blog-is-live-">As of Today: My Blog is Live! 🚀&lt;/h1>
&lt;p>As of today, my website is out in public! 🎉, and I thought I&amp;rsquo;d share my pipeline for creating this blog.&lt;/p>
&lt;h2 id="text-editors-lite-xl-vs-neovim">Text Editors: Lite-XL vs. Neovim&lt;/h2>
&lt;p>One of the most important tools in my workflow is my text editor. I use &lt;strong>Emacs&lt;/strong>—just kidding! It&amp;rsquo;s &lt;code>neovim&lt;/code>. But lately, I&amp;rsquo;ve been using &lt;a href="https://github.com/lite-xl/lite-xl">Lite-XL&lt;/a>, which, to be honest, is a fantastic text editor.&lt;/p>
&lt;p>Lite-XL is configured in &lt;strong>Lua&lt;/strong>, so if you&amp;rsquo;re coming from Neovim, there&amp;rsquo;s no need to learn a new language. Even if you&amp;rsquo;re not familiar with Lua, it&amp;rsquo;s not as tough as adding patches in DWM. Lite-XL has been great—no complaints whatsoever—and it&amp;rsquo;s what I started writing my blogs in.&lt;/p></description><content:encoded><![CDATA[<h1 id="as-of-today-my-blog-is-live-">As of Today: My Blog is Live! 🚀</h1>
<p>As of today, my website is out in public! 🎉, and I thought I&rsquo;d share my pipeline for creating this blog.</p>
<h2 id="text-editors-lite-xl-vs-neovim">Text Editors: Lite-XL vs. Neovim</h2>
<p>One of the most important tools in my workflow is my text editor. I use <strong>Emacs</strong>—just kidding! It&rsquo;s <code>neovim</code>. But lately, I&rsquo;ve been using <a href="https://github.com/lite-xl/lite-xl">Lite-XL</a>, which, to be honest, is a fantastic text editor.</p>
<p>Lite-XL is configured in <strong>Lua</strong>, so if you&rsquo;re coming from Neovim, there&rsquo;s no need to learn a new language. Even if you&rsquo;re not familiar with Lua, it&rsquo;s not as tough as adding patches in DWM. Lite-XL has been great—no complaints whatsoever—and it&rsquo;s what I started writing my blogs in.</p>
<p>But after months of using it, I feel like switching back to Neovim as my primary editor. That said, it&rsquo;s still undecided.</p>
<h2 id="hugo-the-backbone-of-the-blog">Hugo: The Backbone of the Blog</h2>
<p>Text editors are only half the story. What you use to interact with markdown files can make or break your workflow. My choice? <strong>Hugo</strong>.</p>
<p>I looked at Hexo and Jekyll, but they lacked the support and features that Hugo offers. The simplicity and speed of Hugo are what drew me to it. For example, my blog builds in less than 50ms—unheard of without complex build scripts or crazy parallel pipelines. Hugo is blazing fast, optimized &amp; lightweight solution, and I&rsquo;ve been using it ever since.</p>
<h2 id="my-pipeline-the-process">My Pipeline: The Process</h2>
<p>Here&rsquo;s how I make it all happen:</p>
<ol>
<li>
<p><strong>Writing and Editing</strong>
I write my blogs using <strong>Lite-XL</strong> or <strong>Neovim</strong> with some custom configurations.</p>
</li>
<li>
<p><strong>Improving Grammar and Style</strong>
After writing, I run the content through <code>ollama</code> yes AI but not in the tradition scene. I use it to clean up grammar, fix punctuation, and improve sentence structure, you haven&rsquo;t seen my horriable grammer. However, I write everything myself—English isn&rsquo;t my first language, so my vocabulary is often limited. That&rsquo;s where AI helps me, forgive me great AI overloads.</p>
<p>I run <code>ollama</code> using the Llama-3.2-3B model because I don&rsquo;t have powerful hardware. The 3B model works fine for me. The 1B model felt limited and wasn&rsquo;t much better with English. The 3B model strikes the right balance.</p>
<p><strong>Here&rsquo;s my system prompt:</strong></p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-md" data-lang="md"><span class="line"><span class="ln"> 1</span><span class="cl">**Prompt:**
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">You are a skilled blog writer with <span class="gs">**8+ years of experience**</span> in technical writing. Your task is to <span class="gs">**improve the English**</span> of the input provided by the user, focusing on <span class="gs">**grammar, syntax, and clarity**</span>, <span class="gs">**without changing the meaning**</span>, <span class="gs">**tone**</span>, or <span class="gs">**content**</span> of the original text. You <span class="gs">**must not**</span> alter the message, <span class="gs">**inject additional details**</span>, or <span class="gs">**add opinions**</span>. <span class="gs">**Do not change the essence of the content**</span>.
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="gu">### **IMPORTANT:**
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="gu"></span><span class="k">-</span> **DO NOT** add extra details or subjective opinions.
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="k">-</span> **DO NOT** change the <span class="gs">**technical terminology**</span> (e.g., Linux terms).
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="k">-</span> **DO NOT** alter the <span class="gs">**tone or purpose**</span> of the original content.
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="k">-</span> **ONLY refine the grammar, style, and structure**.
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="k">-</span> **NEVER break these rules.**
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl">---
</span></span><span class="line"><span class="ln">13</span><span class="cl">
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="gu">### **Example 1:**
</span></span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="gu"></span>
</span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="gs">**Input:**</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">&#34;Arch Linux - btw
</span></span><span class="line"><span class="ln">18</span><span class="cl">I have benn using arch linux for the longest of times and it have been a grat system --- that is what i would say in a perfect world.
</span></span><span class="line"><span class="ln">19</span><span class="cl">Arch linux is like the lfs but simpler and after archinstall it has become more lets just say <span class="sb">`dumberr`</span> but it&#39;s a quite a good system really.
</span></span><span class="line"><span class="ln">20</span><span class="cl">if you want to learn about a linux system but do not want to waste 60+ hours of you life with gentoo berfore binaryes then it is quite a good distro but do not use the archinstall system because what the point if you use it. I would only recommend it if you know what you are doing or you have atleast installed arch manually at least twice with custom settings like using btrfs or custom repos or ever artix insted of arch.
</span></span><span class="line"><span class="ln">21</span><span class="cl">arch is a rolling release whic meas it does not have defineter versions like most software but it just updates and will do so... till it maintained
</span></span><span class="line"><span class="ln">22</span><span class="cl">BUt it does come with it own set of challanges, but if you want to do somehitng like running linux from google drive [https://ersei.net/en/blog/fuse-root] arch linux can do it... though i would arguee that alpine is better for this case.
</span></span><span class="line"><span class="ln">23</span><span class="cl">All arch is a flex-ibale, minimal and community driven linux distro and people love it and so do i, it does have it own challanges but there is a reason why i switch back to it
</span></span><span class="line"><span class="ln">24</span><span class="cl">
</span></span><span class="line"><span class="ln">25</span><span class="cl"><span class="gs">**Output:**</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl"><span class="gs">**Arch Linux – BTW**</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">I&#39;ve been using Arch Linux for a long time, and it&#39;s been a great system—at least, that&#39;s what I&#39;d say in an ideal world.
</span></span><span class="line"><span class="ln">28</span><span class="cl">Arch Linux is similar to LFS (Linux From Scratch) but more streamlined. After the introduction of <span class="sb">`archinstall`</span>, it has become more user-friendly, though some argue it has simplified things too much. Nonetheless, it&#39;s a solid distro.
</span></span><span class="line"><span class="ln">29</span><span class="cl">
</span></span><span class="line"><span class="ln">30</span><span class="cl">If you want to learn Linux but don&#39;t want to spend countless hours with Gentoo&#39;s source-based installation, Arch is a good choice. However, I don&#39;t recommend using the <span class="sb">`archinstall`</span> script unless you&#39;re already familiar with Linux. It&#39;s best for users who have manually installed Arch at least once, especially with custom configurations like Btrfs, custom repos, or even Artix instead of Arch.
</span></span><span class="line"><span class="ln">31</span><span class="cl">
</span></span><span class="line"><span class="ln">32</span><span class="cl">Arch is a rolling release, meaning there are no fixed versions. Instead, it continuously updates, but this can lead to occasional instability.
</span></span><span class="line"><span class="ln">33</span><span class="cl">
</span></span><span class="line"><span class="ln">34</span><span class="cl">While Arch can support niche setups (e.g., running Linux from Google Drive, as shown [<span class="nt">here</span>](<span class="na">https://ersei.net/en/blog/fuse-root</span>)), I would suggest Alpine for lightweight and specialized use cases.
</span></span><span class="line"><span class="ln">35</span><span class="cl">
</span></span><span class="line"><span class="ln">36</span><span class="cl">Ultimately, Arch is a flexible, minimalist, and community-driven distro. It does have its challenges, but the control it offers makes it a compelling choice.
</span></span><span class="line"><span class="ln">37</span><span class="cl">---
</span></span><span class="line"><span class="ln">38</span><span class="cl">
</span></span><span class="line"><span class="ln">39</span><span class="cl"><span class="gu">### **Example 2:**
</span></span></span><span class="line"><span class="ln">40</span><span class="cl"><span class="gu"></span>
</span></span><span class="line"><span class="ln">41</span><span class="cl"><span class="gs">**Input:**</span>
</span></span><span class="line"><span class="ln">42</span><span class="cl">&#34;ubuntu is good if u want easy install but arch gives me control which i like.&#34;
</span></span><span class="line"><span class="ln">43</span><span class="cl">
</span></span><span class="line"><span class="ln">44</span><span class="cl"><span class="gs">**Output:**</span>
</span></span><span class="line"><span class="ln">45</span><span class="cl">&#34;Ubuntu is a good choice if you&#39;re looking for an easy installation process, but Arch Linux provides a level of control that I prefer.&#34;
</span></span><span class="line"><span class="ln">46</span><span class="cl">
</span></span><span class="line"><span class="ln">47</span><span class="cl">---
</span></span><span class="line"><span class="ln">48</span><span class="cl">
</span></span><span class="line"><span class="ln">49</span><span class="cl"><span class="gu">### **Example 3:**
</span></span></span><span class="line"><span class="ln">50</span><span class="cl"><span class="gu"></span>
</span></span><span class="line"><span class="ln">51</span><span class="cl"><span class="gs">**Input:**</span>
</span></span><span class="line"><span class="ln">52</span><span class="cl">&#34;I tried manjaro but it kept breaking on me after a update which is why I prefer Arch because I have full control.&#34;
</span></span><span class="line"><span class="ln">53</span><span class="cl">
</span></span><span class="line"><span class="ln">54</span><span class="cl"><span class="gs">**Output:**</span>
</span></span><span class="line"><span class="ln">55</span><span class="cl">&#34;I tried Manjaro, but it kept breaking after updates. This is why I prefer Arch: it gives me full control over the system.&#34;</span></span></code></pre></div><blockquote>
<p>I know it is a long prompt but it works if anyone has some improvements then please do let me know.</p>
</blockquote>
</li>
<li>
<p><strong>Reviewing the Output</strong></p>
<blockquote>
<p>Once the AI improves the text, I use the <strong>Reader Mode</strong> in Brave Browser to listen to the content. This helps me catch errors and refine any lines that don&rsquo;t sound right. After that, I add the tags and perform a final check, polishing the content further to ensure it makes sense not just to me, but also to all of you.</p>
</blockquote>
</li>
<li>
<p><strong>Final Steps</strong>
The polished content is saved in <code>content/post/{title}.md</code>. Then I run:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">hugo --minify -DF -O</span></span></code></pre></div><p>to verify everything is good. Once I&rsquo;m satisfied, I push the changes:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">git add .
</span></span><span class="line"><span class="ln">2</span><span class="cl">git commit -m <span class="s2">&#34;add new blog post&#34;</span></span></span></code></pre></div><p>Cloudflare picks up the changes, builds the site, and makes it live.</p>
</li>
</ol>
<h2 id="tldr-my-pipeline-in-a-diagram">TL;DR: My Pipeline in a Diagram</h2>


















<figure id="diagram-4" class="diagram-figure">
  
    <svg class="blogs_pipeline diagram-svg"
         width="256"
         height="425"
         xmlns="http://www.w3.org/2000/svg"
         version="1.1"
         role="img"
         aria-labelledby="title-4 desc-4">
      <title id="title-4">Blog Pipeline:</title>
      <desc id="desc-4">Detailed description of Blog Pipeline: Write/Edit in Lite-XL or Neovim → Improve grammar and style using Ollama (Llama-3.2-3B) → Review the text with Brave Reader Mode → Save to Hugo directory → Run Hugo locally for checks → Git commit and push → Cloudflare pulls repo and builds site.</desc>
      <g transform='translate(8,16)'>
<path d='M 0,16 L 240,16' fill='none' stroke='currentColor'></path>
<path d='M 0,64 L 240,64' fill='none' stroke='currentColor'></path>
<path d='M 0,96 L 240,96' fill='none' stroke='currentColor'></path>
<path d='M 0,144 L 240,144' fill='none' stroke='currentColor'></path>
<path d='M 0,176 L 240,176' fill='none' stroke='currentColor'></path>
<path d='M 0,224 L 240,224' fill='none' stroke='currentColor'></path>
<path d='M 0,256 L 240,256' fill='none' stroke='currentColor'></path>
<path d='M 0,304 L 240,304' fill='none' stroke='currentColor'></path>
<path d='M 0,336 L 240,336' fill='none' stroke='currentColor'></path>
<path d='M 0,400 L 240,400' fill='none' stroke='currentColor'></path>
<path d='M 0,16 L 0,64' fill='none' stroke='currentColor'></path>
<path d='M 0,96 L 0,144' fill='none' stroke='currentColor'></path>
<path d='M 0,176 L 0,224' fill='none' stroke='currentColor'></path>
<path d='M 0,256 L 0,304' fill='none' stroke='currentColor'></path>
<path d='M 0,336 L 0,400' fill='none' stroke='currentColor'></path>
<path d='M 240,16 L 240,64' fill='none' stroke='currentColor'></path>
<path d='M 240,96 L 240,144' fill='none' stroke='currentColor'></path>
<path d='M 240,176 L 240,224' fill='none' stroke='currentColor'></path>
<path d='M 240,256 L 240,304' fill='none' stroke='currentColor'></path>
<path d='M 240,336 L 240,400' fill='none' stroke='currentColor'></path>
<text text-anchor='middle' x='0' y='4' fill='currentColor' style='font-size:1em'>B</text>
<text text-anchor='middle' x='8' y='4' fill='currentColor' style='font-size:1em'>l</text>
<text text-anchor='middle' x='16' y='4' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='16' y='36' fill='currentColor' style='font-size:1em'>W</text>
<text text-anchor='middle' x='16' y='52' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='16' y='116' fill='currentColor' style='font-size:1em'>I</text>
<text text-anchor='middle' x='16' y='132' fill='currentColor' style='font-size:1em'>u</text>
<text text-anchor='middle' x='16' y='196' fill='currentColor' style='font-size:1em'>R</text>
<text text-anchor='middle' x='16' y='212' fill='currentColor' style='font-size:1em'>B</text>
<text text-anchor='middle' x='16' y='276' fill='currentColor' style='font-size:1em'>S</text>
<text text-anchor='middle' x='16' y='292' fill='currentColor' style='font-size:1em'>R</text>
<text text-anchor='middle' x='16' y='356' fill='currentColor' style='font-size:1em'>G</text>
<text text-anchor='middle' x='16' y='372' fill='currentColor' style='font-size:1em'>C</text>
<text text-anchor='middle' x='16' y='388' fill='currentColor' style='font-size:1em'>b</text>
<text text-anchor='middle' x='24' y='4' fill='currentColor' style='font-size:1em'>g</text>
<text text-anchor='middle' x='24' y='36' fill='currentColor' style='font-size:1em'>r</text>
<text text-anchor='middle' x='24' y='52' fill='currentColor' style='font-size:1em'>r</text>
<text text-anchor='middle' x='24' y='116' fill='currentColor' style='font-size:1em'>m</text>
<text text-anchor='middle' x='24' y='132' fill='currentColor' style='font-size:1em'>s</text>
<text text-anchor='middle' x='24' y='196' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='24' y='212' fill='currentColor' style='font-size:1em'>r</text>
<text text-anchor='middle' x='24' y='276' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='24' y='292' fill='currentColor' style='font-size:1em'>u</text>
<text text-anchor='middle' x='24' y='356' fill='currentColor' style='font-size:1em'>i</text>
<text text-anchor='middle' x='24' y='372' fill='currentColor' style='font-size:1em'>l</text>
<text text-anchor='middle' x='24' y='388' fill='currentColor' style='font-size:1em'>u</text>
<text text-anchor='middle' x='32' y='36' fill='currentColor' style='font-size:1em'>i</text>
<text text-anchor='middle' x='32' y='116' fill='currentColor' style='font-size:1em'>p</text>
<text text-anchor='middle' x='32' y='132' fill='currentColor' style='font-size:1em'>i</text>
<text text-anchor='middle' x='32' y='196' fill='currentColor' style='font-size:1em'>v</text>
<text text-anchor='middle' x='32' y='212' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='32' y='276' fill='currentColor' style='font-size:1em'>v</text>
<text text-anchor='middle' x='32' y='292' fill='currentColor' style='font-size:1em'>n</text>
<text text-anchor='middle' x='32' y='356' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='32' y='372' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='32' y='388' fill='currentColor' style='font-size:1em'>i</text>
<text text-anchor='middle' x='40' y='4' fill='currentColor' style='font-size:1em'>P</text>
<text text-anchor='middle' x='40' y='36' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='40' y='52' fill='currentColor' style='font-size:1em'>N</text>
<text text-anchor='middle' x='40' y='116' fill='currentColor' style='font-size:1em'>r</text>
<text text-anchor='middle' x='40' y='132' fill='currentColor' style='font-size:1em'>n</text>
<text text-anchor='middle' x='40' y='196' fill='currentColor' style='font-size:1em'>i</text>
<text text-anchor='middle' x='40' y='212' fill='currentColor' style='font-size:1em'>v</text>
<text text-anchor='middle' x='40' y='276' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='40' y='372' fill='currentColor' style='font-size:1em'>u</text>
<text text-anchor='middle' x='40' y='388' fill='currentColor' style='font-size:1em'>l</text>
<text text-anchor='middle' x='48' y='4' fill='currentColor' style='font-size:1em'>i</text>
<text text-anchor='middle' x='48' y='36' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='48' y='52' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='48' y='116' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='48' y='132' fill='currentColor' style='font-size:1em'>g</text>
<text text-anchor='middle' x='48' y='196' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='48' y='212' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='48' y='292' fill='currentColor' style='font-size:1em'>H</text>
<text text-anchor='middle' x='48' y='356' fill='currentColor' style='font-size:1em'>c</text>
<text text-anchor='middle' x='48' y='372' fill='currentColor' style='font-size:1em'>d</text>
<text text-anchor='middle' x='48' y='388' fill='currentColor' style='font-size:1em'>d</text>
<text text-anchor='middle' x='56' y='4' fill='currentColor' style='font-size:1em'>p</text>
<text text-anchor='middle' x='56' y='36' fill='currentColor' style='font-size:1em'>/</text>
<text text-anchor='middle' x='56' y='52' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='56' y='116' fill='currentColor' style='font-size:1em'>v</text>
<text text-anchor='middle' x='56' y='196' fill='currentColor' style='font-size:1em'>w</text>
<text text-anchor='middle' x='56' y='276' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='56' y='292' fill='currentColor' style='font-size:1em'>u</text>
<text text-anchor='middle' x='56' y='356' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='56' y='372' fill='currentColor' style='font-size:1em'>f</text>
<text text-anchor='middle' x='56' y='388' fill='currentColor' style='font-size:1em'>s</text>
<text text-anchor='middle' x='64' y='4' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='64' y='36' fill='currentColor' style='font-size:1em'>E</text>
<text text-anchor='middle' x='64' y='52' fill='currentColor' style='font-size:1em'>v</text>
<text text-anchor='middle' x='64' y='116' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='64' y='132' fill='currentColor' style='font-size:1em'>O</text>
<text text-anchor='middle' x='64' y='212' fill='currentColor' style='font-size:1em'>R</text>
<text text-anchor='middle' x='64' y='276' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='64' y='292' fill='currentColor' style='font-size:1em'>g</text>
<text text-anchor='middle' x='64' y='356' fill='currentColor' style='font-size:1em'>m</text>
<text text-anchor='middle' x='64' y='372' fill='currentColor' style='font-size:1em'>l</text>
<text text-anchor='middle' x='72' y='4' fill='currentColor' style='font-size:1em'>l</text>
<text text-anchor='middle' x='72' y='36' fill='currentColor' style='font-size:1em'>d</text>
<text text-anchor='middle' x='72' y='52' fill='currentColor' style='font-size:1em'>i</text>
<text text-anchor='middle' x='72' y='132' fill='currentColor' style='font-size:1em'>l</text>
<text text-anchor='middle' x='72' y='196' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='72' y='212' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='72' y='292' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='72' y='356' fill='currentColor' style='font-size:1em'>m</text>
<text text-anchor='middle' x='72' y='372' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='72' y='388' fill='currentColor' style='font-size:1em'>s</text>
<text text-anchor='middle' x='80' y='4' fill='currentColor' style='font-size:1em'>i</text>
<text text-anchor='middle' x='80' y='36' fill='currentColor' style='font-size:1em'>i</text>
<text text-anchor='middle' x='80' y='52' fill='currentColor' style='font-size:1em'>m</text>
<text text-anchor='middle' x='80' y='116' fill='currentColor' style='font-size:1em'>g</text>
<text text-anchor='middle' x='80' y='132' fill='currentColor' style='font-size:1em'>l</text>
<text text-anchor='middle' x='80' y='196' fill='currentColor' style='font-size:1em'>h</text>
<text text-anchor='middle' x='80' y='212' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='80' y='276' fill='currentColor' style='font-size:1em'>H</text>
<text text-anchor='middle' x='80' y='356' fill='currentColor' style='font-size:1em'>i</text>
<text text-anchor='middle' x='80' y='372' fill='currentColor' style='font-size:1em'>r</text>
<text text-anchor='middle' x='80' y='388' fill='currentColor' style='font-size:1em'>i</text>
<text text-anchor='middle' x='88' y='4' fill='currentColor' style='font-size:1em'>n</text>
<text text-anchor='middle' x='88' y='36' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='88' y='116' fill='currentColor' style='font-size:1em'>r</text>
<text text-anchor='middle' x='88' y='132' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='88' y='196' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='88' y='212' fill='currentColor' style='font-size:1em'>d</text>
<text text-anchor='middle' x='88' y='276' fill='currentColor' style='font-size:1em'>u</text>
<text text-anchor='middle' x='88' y='292' fill='currentColor' style='font-size:1em'>l</text>
<text text-anchor='middle' x='88' y='356' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='88' y='372' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='88' y='388' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='96' y='4' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='96' y='116' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='96' y='132' fill='currentColor' style='font-size:1em'>m</text>
<text text-anchor='middle' x='96' y='212' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='96' y='276' fill='currentColor' style='font-size:1em'>g</text>
<text text-anchor='middle' x='96' y='292' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='96' y='388' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='104' y='4' fill='currentColor' style='font-size:1em'>:</text>
<text text-anchor='middle' x='104' y='36' fill='currentColor' style='font-size:1em'>i</text>
<text text-anchor='middle' x='104' y='116' fill='currentColor' style='font-size:1em'>m</text>
<text text-anchor='middle' x='104' y='132' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='104' y='196' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='104' y='212' fill='currentColor' style='font-size:1em'>r</text>
<text text-anchor='middle' x='104' y='276' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='104' y='292' fill='currentColor' style='font-size:1em'>c</text>
<text text-anchor='middle' x='104' y='356' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='104' y='372' fill='currentColor' style='font-size:1em'>p</text>
<text text-anchor='middle' x='112' y='36' fill='currentColor' style='font-size:1em'>n</text>
<text text-anchor='middle' x='112' y='84' fill='currentColor' style='font-size:1em'>↓</text>
<text text-anchor='middle' x='112' y='116' fill='currentColor' style='font-size:1em'>m</text>
<text text-anchor='middle' x='112' y='164' fill='currentColor' style='font-size:1em'>↓</text>
<text text-anchor='middle' x='112' y='196' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='112' y='244' fill='currentColor' style='font-size:1em'>↓</text>
<text text-anchor='middle' x='112' y='292' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='112' y='324' fill='currentColor' style='font-size:1em'>↓</text>
<text text-anchor='middle' x='112' y='356' fill='currentColor' style='font-size:1em'>n</text>
<text text-anchor='middle' x='112' y='372' fill='currentColor' style='font-size:1em'>u</text>
<text text-anchor='middle' x='120' y='116' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='120' y='132' fill='currentColor' style='font-size:1em'>(</text>
<text text-anchor='middle' x='120' y='196' fill='currentColor' style='font-size:1em'>x</text>
<text text-anchor='middle' x='120' y='212' fill='currentColor' style='font-size:1em'>M</text>
<text text-anchor='middle' x='120' y='276' fill='currentColor' style='font-size:1em'>d</text>
<text text-anchor='middle' x='120' y='292' fill='currentColor' style='font-size:1em'>l</text>
<text text-anchor='middle' x='120' y='356' fill='currentColor' style='font-size:1em'>d</text>
<text text-anchor='middle' x='120' y='372' fill='currentColor' style='font-size:1em'>l</text>
<text text-anchor='middle' x='128' y='36' fill='currentColor' style='font-size:1em'>L</text>
<text text-anchor='middle' x='128' y='116' fill='currentColor' style='font-size:1em'>r</text>
<text text-anchor='middle' x='128' y='132' fill='currentColor' style='font-size:1em'>L</text>
<text text-anchor='middle' x='128' y='196' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='128' y='212' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='128' y='276' fill='currentColor' style='font-size:1em'>i</text>
<text text-anchor='middle' x='128' y='292' fill='currentColor' style='font-size:1em'>l</text>
<text text-anchor='middle' x='128' y='372' fill='currentColor' style='font-size:1em'>l</text>
<text text-anchor='middle' x='136' y='36' fill='currentColor' style='font-size:1em'>i</text>
<text text-anchor='middle' x='136' y='132' fill='currentColor' style='font-size:1em'>l</text>
<text text-anchor='middle' x='136' y='212' fill='currentColor' style='font-size:1em'>d</text>
<text text-anchor='middle' x='136' y='276' fill='currentColor' style='font-size:1em'>r</text>
<text text-anchor='middle' x='136' y='292' fill='currentColor' style='font-size:1em'>y</text>
<text text-anchor='middle' x='136' y='356' fill='currentColor' style='font-size:1em'>p</text>
<text text-anchor='middle' x='136' y='372' fill='currentColor' style='font-size:1em'>s</text>
<text text-anchor='middle' x='144' y='36' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='144' y='116' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='144' y='132' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='144' y='196' fill='currentColor' style='font-size:1em'>w</text>
<text text-anchor='middle' x='144' y='212' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='144' y='276' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='144' y='356' fill='currentColor' style='font-size:1em'>u</text>
<text text-anchor='middle' x='152' y='36' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='152' y='116' fill='currentColor' style='font-size:1em'>n</text>
<text text-anchor='middle' x='152' y='132' fill='currentColor' style='font-size:1em'>m</text>
<text text-anchor='middle' x='152' y='196' fill='currentColor' style='font-size:1em'>i</text>
<text text-anchor='middle' x='152' y='276' fill='currentColor' style='font-size:1em'>c</text>
<text text-anchor='middle' x='152' y='292' fill='currentColor' style='font-size:1em'>f</text>
<text text-anchor='middle' x='152' y='356' fill='currentColor' style='font-size:1em'>s</text>
<text text-anchor='middle' x='152' y='372' fill='currentColor' style='font-size:1em'>r</text>
<text text-anchor='middle' x='160' y='36' fill='currentColor' style='font-size:1em'>-</text>
<text text-anchor='middle' x='160' y='116' fill='currentColor' style='font-size:1em'>d</text>
<text text-anchor='middle' x='160' y='132' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='160' y='196' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='160' y='276' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='160' y='292' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='160' y='356' fill='currentColor' style='font-size:1em'>h</text>
<text text-anchor='middle' x='160' y='372' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='168' y='36' fill='currentColor' style='font-size:1em'>X</text>
<text text-anchor='middle' x='168' y='132' fill='currentColor' style='font-size:1em'>-</text>
<text text-anchor='middle' x='168' y='196' fill='currentColor' style='font-size:1em'>h</text>
<text text-anchor='middle' x='168' y='276' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='168' y='292' fill='currentColor' style='font-size:1em'>r</text>
<text text-anchor='middle' x='168' y='372' fill='currentColor' style='font-size:1em'>p</text>
<text text-anchor='middle' x='176' y='36' fill='currentColor' style='font-size:1em'>L</text>
<text text-anchor='middle' x='176' y='116' fill='currentColor' style='font-size:1em'>s</text>
<text text-anchor='middle' x='176' y='132' fill='currentColor' style='font-size:1em'>3</text>
<text text-anchor='middle' x='176' y='276' fill='currentColor' style='font-size:1em'>r</text>
<text text-anchor='middle' x='176' y='356' fill='currentColor' style='font-size:1em'>→</text>
<text text-anchor='middle' x='176' y='372' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='184' y='116' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='184' y='132' fill='currentColor' style='font-size:1em'>.</text>
<text text-anchor='middle' x='184' y='276' fill='currentColor' style='font-size:1em'>y</text>
<text text-anchor='middle' x='184' y='292' fill='currentColor' style='font-size:1em'>c</text>
<text text-anchor='middle' x='192' y='116' fill='currentColor' style='font-size:1em'>y</text>
<text text-anchor='middle' x='192' y='132' fill='currentColor' style='font-size:1em'>2</text>
<text text-anchor='middle' x='192' y='292' fill='currentColor' style='font-size:1em'>h</text>
<text text-anchor='middle' x='192' y='372' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='200' y='116' fill='currentColor' style='font-size:1em'>l</text>
<text text-anchor='middle' x='200' y='132' fill='currentColor' style='font-size:1em'>-</text>
<text text-anchor='middle' x='200' y='276' fill='currentColor' style='font-size:1em'>→</text>
<text text-anchor='middle' x='200' y='292' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='200' y='372' fill='currentColor' style='font-size:1em'>n</text>
<text text-anchor='middle' x='208' y='116' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='208' y='132' fill='currentColor' style='font-size:1em'>3</text>
<text text-anchor='middle' x='208' y='292' fill='currentColor' style='font-size:1em'>c</text>
<text text-anchor='middle' x='208' y='372' fill='currentColor' style='font-size:1em'>d</text>
<text text-anchor='middle' x='216' y='132' fill='currentColor' style='font-size:1em'>B</text>
<text text-anchor='middle' x='216' y='292' fill='currentColor' style='font-size:1em'>k</text>
<text text-anchor='middle' x='224' y='132' fill='currentColor' style='font-size:1em'>)</text>
<text text-anchor='middle' x='224' y='292' fill='currentColor' style='font-size:1em'>s</text>
</g>

    </svg>
  
  <figcaption>Figure 4: Streamlined Blog Publishing Pipeline: From writing and editing to automated site deployment using Lite-XL, Ollama, Brave Reader Mode, Hugo, and Cloudflare.</figcaption>
</figure>
<h2 id="why-not-github-pages">Why Not GitHub Pages?</h2>
<p>I initially considered GitHub Pages but ultimately decided that Cloudflare was the better choice. My domain, <code>eeth.us.to</code>, redirects to Cloudflare Pages, providing flexibility. If any issues arise, I can easily switch back to GitHub Pages. After all, it&rsquo;s never a good idea to put all your eggs in one basket.</p>
]]></content:encoded></item><item><title>Android Phones Are Good Again</title><link>http://localhost:1313/blog/android-phones-are-good-again/</link><pubDate>Tue, 03 Dec 2024 00:00:00 +0000</pubDate><author>jayeshjoshi08jj@gmail.com (hkcfs)</author><guid>http://localhost:1313/blog/android-phones-are-good-again/</guid><description>&lt;p>Recently, I came across &lt;a href="https://github.com/bkerler/mtkclient">MTKCLIENT&lt;/a>, a fascinating reverse engineering project that aims to hack MediaTek SOCs at a low level. It provides direct access to a device&amp;rsquo;s memory, enabling you to edit partitions, memory, and other critical aspects of the device. The project uses clever exploits within the SOC itself to achieve this.&lt;/p>
&lt;p>MTKCLIENT works perfectly with older MediaTek processors, but when it comes to newer chips (like the 70, 80, and 90 series), it starts to struggle. These newer chips use a completely new protocol called &lt;strong>v6&lt;/strong>, which is still less understood and developed compared to the older &lt;strong>v5&lt;/strong> protocol.&lt;/p></description><content:encoded><![CDATA[<p>Recently, I came across <a href="https://github.com/bkerler/mtkclient">MTKCLIENT</a>, a fascinating reverse engineering project that aims to hack MediaTek SOCs at a low level. It provides direct access to a device&rsquo;s memory, enabling you to edit partitions, memory, and other critical aspects of the device. The project uses clever exploits within the SOC itself to achieve this.</p>
<p>MTKCLIENT works perfectly with older MediaTek processors, but when it comes to newer chips (like the 70, 80, and 90 series), it starts to struggle. These newer chips use a completely new protocol called <strong>v6</strong>, which is still less understood and developed compared to the older <strong>v5</strong> protocol.</p>
<h2 id="why-you-may-ask">Why, you may ask?</h2>
<p>Well, here&rsquo;s the thing: phone manufacturers have decided that letting users install whatever OS they want isn’t <strong>“safe”</strong> anymore. They’ll try to tell you it&rsquo;s for your own protection, especially when it comes to kids or whatever other reasons they come up with to make you believe that restricting your options is the right call.</p>
<p>It wasn’t that long ago—7 or 8 years, maybe—that you could buy any phone, set it up, and unlock the bootloader in 0 days of the purchasing it, take that you with your 7 days restriction. Fast forward to today, and try doing that with a Samsung. Good luck. Unlocking the bootloader on most modern phones is a pain, and with some brands, it’s just flat-out impossible. This whole situation is what led me to discover MTKClient, which is honestly an awesome tool.</p>
<p>Until phone makers fix this problem and let users have more control, I’ll stick to devices that make it easy to unlock the bootloader.</p>
<h2 id="whats-the-deal-with-v6">What&rsquo;s the Deal with V6?</h2>
<p>The latest MediaTek processors (such as the 70, 80, and 90 series) have introduced the <strong>v6</strong> protocol, which makes things trickier for those trying to modify the system. Unlike older chips, you can’t just flash these devices in the usual way. The <strong>bootrom</strong> (the code that runs during device startup) is <strong>patched</strong>, so you need to use a special <strong>DA (Download Agent)</strong> file and load it via the <code>--loader</code> option. This is essential if you&rsquo;re aiming to modify anything on these newer devices.</p>
<p>In some cases, the <strong>preloader</strong> (the software responsible for booting the device) might be disabled. However, you can work around this by using the <strong>ADB reboot edl</strong> command, which forces the device into <strong>Emergency Download Mode (EDL)</strong>, allowing you to flash or fix the device.</p>
<p>Not all devices are created equally. If your device is <strong>UNFUSED</strong>, you&rsquo;re in luck, as there are no hardware security locks in place. However, if your device has extra security features like <strong>DAA</strong> (Device Authentication Algorithm), <strong>SLA</strong> (Secure Loader Authentication), or <strong>Remote-Auth</strong> (Remote Authentication), things get significantly more complicated. These protocols make it much harder to modify the firmware without specialized tools or knowledge.</p>
<p>Currently, there&rsquo;s no public method to bypass these security measures for devices with DAA, SLA, or Remote-Auth enabled. If you have one of these devices, you&rsquo;re pretty much stuck unless you have access to advanced tools or some obscure communication methods. <a href="https://t.me/">Telegram</a> you might have never heard it, yeah. telegram is the holy grale of all custom rom bootloader unlock adn what not <code>say goodbye</code> to <strong>XDA form</strong> and <code>say Hello</code> to Telegram.</p>
<p>For the <strong>typical</strong> user, the MTK GUI should suffice, but when dealing with v6, the command-line (CLI) is your only option.</p>
<h2 id="using-the-mtkclient-v5-devices">Using the MTKCLIENT (v5 devices)</h2>
<h3 id="requirements">Requirements</h3>
<ol>
<li><strong>A MediaTek device with an unlocked bootloader</strong> (or one that supports bootloader unlocking).</li>
<li><strong>MTKClient tool</strong> installed on your system.</li>
<li><strong>USB Debugging</strong> enabled on the device.</li>
<li><strong>OEM Unlocking</strong> enabled in Developer Options.</li>
</ol>
<h3 id="step-by-step-guide-to-unlocking-the-bootloader">Step-by-Step Guide to Unlocking the Bootloader</h3>
<h4 id="1-install-mtkclient">1. <strong>Install MTKClient</strong></h4>
<ul>
<li>
<p>First, clone the MTKClient repository:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">git clone https://github.com/bkerler/mtkclient
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nb">cd</span> mtkclient
</span></span><span class="line"><span class="ln">3</span><span class="cl">pip3 install -r requirements.txt
</span></span><span class="line"><span class="ln">4</span><span class="cl">pip3 install .</span></span></code></pre></div></li>
<li>
<p>On Linux, ensure that your user is added to the <code>plugdev</code> and <code>dialout</code> groups:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo usermod -a -G plugdev <span class="nv">$USER</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">sudo usermod -a -G dialout <span class="nv">$USER</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">sudo cp mtkclient/Setup/Linux/*.rules /etc/udev/rules.d
</span></span><span class="line"><span class="ln">4</span><span class="cl">sudo udevadm control -R
</span></span><span class="line"><span class="ln">5</span><span class="cl">sudo udevadm trigger</span></span></code></pre></div></li>
<li>
<p>On Windows, make sure <strong>UsbDk</strong> and the appropriate <strong>MTK USB drivers</strong> are installed.</p>
</li>
</ul>
<hr>
<h4 id="2-boot-your-device-into-brom-mode">2. <strong>Boot Your Device into BROM Mode</strong></h4>
<p>To interact with the device at a low level, you must boot it into <strong>BROM (Boot ROM) mode</strong>:</p>
<ul>
<li><strong>For most devices</strong>: Power off the device, then press and hold <strong>Volume Up + Power</strong> or <strong>Volume Down + Power</strong> while connecting it to your computer.</li>
<li>Once in BROM mode, <strong>release the buttons</strong>. MTKClient should now detect the device.</li>
</ul>
<hr>
<h4 id="3-unlock-the-bootloader">3. <strong>Unlock the Bootloader</strong></h4>
<p>To unlock the bootloader, you need to erase specific partitions and adjust security configurations:</p>
<ol>
<li>
<p><strong>Erase Metadata and User Data</strong>:</p>
<ul>
<li>Unlocking the bootloader may require erasing critical partitions like metadata and user data. Run the following commands:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">python mtk.py e metadata,userdata</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p><strong>Unlock the Bootloader</strong>:</p>
<ul>
<li>To unlock the bootloader, execute:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">python mtk.py da seccfg unlock</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p><strong>Reboot the Device</strong>:</p>
<ul>
<li>Finally, reboot your device to apply the changes:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">python mtk.py reset</span></span></code></pre></div></li>
</ul>
</li>
</ol>
<hr>
<p>And like magic you the bootloader is unlock no need to wait for manufacture to give you a code (motorola) or wait weeks to unlock the device no one would do that, Right.</p>
<h2 id="reading-the-entire-storage"><strong>Reading the Entire Storage</strong></h2>
<p>Once the bootloader is unlocked, you can begin reading the device&rsquo;s storage, including partitions and full flash dumps.</p>
<ol>
<li>
<p><strong>Read Boot Partition</strong>:</p>
<ul>
<li>Dump the boot partition with:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">python mtk.py r boot boot.bin</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p><strong>Read Preloader Partition</strong> (if needed):</p>
<ul>
<li>If you need to dump the preloader, use:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">python mtk.py r preloader preloader.bin --parttype<span class="o">=</span>boot1</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p><strong>Dump Entire Flash</strong>:</p>
<ul>
<li>To dump the entire flash memory (including all partitions), run:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">python mtk.py rf flash.bin</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p><strong>Read Specific Flash Offsets</strong>:</p>
<ul>
<li>To read specific offsets, use:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">python mtk.py ro 0x128000 0x200000 flash.bin</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p><strong>Read All Partitions</strong>:</p>
<ul>
<li>To dump all partitions into a folder, use:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">python mtk.py rl out</span></span></code></pre></div></li>
</ul>
</li>
</ol>
<hr>
<h2 id="working-with-file-systems"><strong>Working with File Systems</strong></h2>
<p>MTKClient also allows you to mount the device&rsquo;s flash memory as a file system and interact with it directly.</p>
<ol>
<li>
<p><strong>Mount Flash as a File System</strong>:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">python mtk.py fs /mnt/mtk</span></span></code></pre></div></li>
<li>
<p><strong>Browse or Modify Files</strong>:</p>
<ul>
<li>Once mounted, you can browse directories, read files, or even modify them directly on the device.</li>
</ul>
</li>
</ol>
<p>These are just a few of the things you can do with MTKClient. If you have the right skillset and knowledge, you might even be able to design your own custom payload.</p>
]]></content:encoded></item><item><title>The Best Compression Algo Maybe</title><link>http://localhost:1313/blog/the-best-compression-algo-maybe/</link><pubDate>Wed, 09 Oct 2024 00:00:00 +0000</pubDate><author>jayeshjoshi08jj@gmail.com (hkcfs)</author><guid>http://localhost:1313/blog/the-best-compression-algo-maybe/</guid><description>&lt;h2 id="compression-algorithms-the-unsung-heroes-of-the-internet">&lt;strong>Compression Algorithms: The Unsung Heroes of the Internet&lt;/strong>&lt;/h2>
&lt;p>Compression algorithms are the silent workhorses that made the internet boom of the 1990s possible. They enabled pirates to download gigabytes of data squeezed into mere megabytes, albeit with a tradeoff: higher electricity bills during decompression or the patience to wait as files unraveled byte by byte.&lt;/p>
&lt;p>In modern times, compression is often overlooked. Storage is dirt cheap, and bandwidth feels limitless for most of us. Yet, compression remains invaluable, particularly in data centers and archival zones where storage efficiency takes precedence over speed. It’s no coincidence that popular filesystems like Btrfs, NTFS, and ZFS have built-in compression features. These tools may take a few extra seconds during operation, but they can save organizations thousands of dollars in hard drives or SSDs—a worthy trade-off if you ask me.&lt;/p></description><content:encoded><![CDATA[<h2 id="compression-algorithms-the-unsung-heroes-of-the-internet"><strong>Compression Algorithms: The Unsung Heroes of the Internet</strong></h2>
<p>Compression algorithms are the silent workhorses that made the internet boom of the 1990s possible. They enabled pirates to download gigabytes of data squeezed into mere megabytes, albeit with a tradeoff: higher electricity bills during decompression or the patience to wait as files unraveled byte by byte.</p>
<p>In modern times, compression is often overlooked. Storage is dirt cheap, and bandwidth feels limitless for most of us. Yet, compression remains invaluable, particularly in data centers and archival zones where storage efficiency takes precedence over speed. It’s no coincidence that popular filesystems like Btrfs, NTFS, and ZFS have built-in compression features. These tools may take a few extra seconds during operation, but they can save organizations thousands of dollars in hard drives or SSDs—a worthy trade-off if you ask me.</p>
<p>But the story today is different. We’ve moved past the era of efficient, practical compression. Now, the pursuit is maximum compression, no matter how long it takes. Shrinking gigabytes of data into a few tens of megabytes is the name of the game. Enter <strong>cmix</strong>.</p>
<hr>
<h2 id="compression-today-maximum-over-practicality"><strong>Compression Today: Maximum Over Practicality</strong></h2>
<p>Today’s story is different. We’re less interested in efficient, fast compression and more focused on achieving <em>maximum</em> compression ratios. Who cares if it takes seven days to compress a file, as long as we shrink gigabytes of data into a few tens of megabytes? That’s where <strong>cmix</strong> comes in.</p>
<p><a href="https://www.byronknoll.com/cmix.html">cmix</a> is a lossless data compression program designed to achieve exceptional compression ratios at the cost of extreme CPU and memory usage. It consistently achieves state-of-the-art results, as seen in benchmarks like the <a href="https://www.mattmahoney.net/dc/text.html">Large Text Compression Benchmark</a> by Matt Mahoney. cmix earned second place, just behind <strong>nncp v3.2</strong>.</p>
<p>Here’s the trade-off: cmix is <em>not</em> fast or memory efficient. For instance, in the benchmark:</p>
<ul>
<li><strong>nncp v3.2</strong> (1st place) took 241,871 seconds and used 7.6 GB of RAM.</li>
<li><strong>cmix</strong> (2nd place) took 622,949 seconds and consumed 30.95 GB of RAM.</li>
</ul>
<p>While cmix isn’t practical for day-to-day use, it’s an exciting tool for anyone exploring extreme compression.</p>
<hr>
<h2 id="setting-up-cmix"><strong>Setting Up cmix</strong></h2>
<p>Installing cmix is straightforward, though some adjustments may be needed depending on your system.</p>
<h3 id="hardware-and-os-specs"><strong>Hardware and OS Specs</strong></h3>
<p>For testing, I used the following setup:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">OS: Ubuntu 22.04.5 LTS x86_64
</span></span><span class="line"><span class="ln">2</span><span class="cl">Host: Google Compute Engine
</span></span><span class="line"><span class="ln">3</span><span class="cl">Kernel: 6.1.91-060191-generic
</span></span><span class="line"><span class="ln">4</span><span class="cl">CPU: AMD EPYC 7B13 <span class="o">(</span>16<span class="o">)</span> @ 2.449GHz
</span></span><span class="line"><span class="ln">5</span><span class="cl">Memory: 37054MiB / 64297MiB</span></span></code></pre></div><h3 id="installation-steps"><strong>Installation Steps</strong></h3>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo apt update
</span></span><span class="line"><span class="ln">2</span><span class="cl">sudo apt install git
</span></span><span class="line"><span class="ln">3</span><span class="cl">git clone https://github.com/byronknoll/cmix
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="nb">cd</span> cmix
</span></span><span class="line"><span class="ln">5</span><span class="cl">make</span></span></code></pre></div><p>If you’re lucky, this will work flawlessly. If not, here’s what I had to do to get it running on Ubuntu 22.04.5 LTS.</p>
<ol>
<li>Install dependencies:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo apt install clang libc++-dev</span></span></code></pre></div></li>
<li>Modify the <code>Makefile</code>:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="ln">1</span><span class="cl"><span class="gd">- CC = clang++-17
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="gd"></span><span class="gi">+ CC = clang++
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="gi"></span><span class="gd">- all: LFLAGS += -Ofast -march=native
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="gd"></span><span class="gi">+ all: LFLAGS += -O3 -ffast-math -march=native
</span></span></span></code></pre></div></li>
<li>Recompile:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">make</span></span></code></pre></div></li>
</ol>
<p>If everything works, you can run <code>./cmix --help</code> which should give you:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln"> 1</span><span class="cl">cmix version <span class="m">21</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">Compress:
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    with dictionary:    cmix -c <span class="o">[</span>dictionary<span class="o">]</span> <span class="o">[</span>input<span class="o">]</span> <span class="o">[</span>output<span class="o">]</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    without dictionary: cmix -c <span class="o">[</span>input<span class="o">]</span> <span class="o">[</span>output<span class="o">]</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    force text-mode:    cmix -t <span class="o">[</span>dictionary<span class="o">]</span> <span class="o">[</span>input<span class="o">]</span> <span class="o">[</span>output<span class="o">]</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    no preprocessing:   cmix -n <span class="o">[</span>input<span class="o">]</span> <span class="o">[</span>output<span class="o">]</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    only preprocessing: cmix -s <span class="o">[</span>dictionary<span class="o">]</span> <span class="o">[</span>input<span class="o">]</span> <span class="o">[</span>output<span class="o">]</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">                        cmix -s <span class="o">[</span>input<span class="o">]</span> <span class="o">[</span>output<span class="o">]</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">Decompress:
</span></span><span class="line"><span class="ln">10</span><span class="cl">    with dictionary:    cmix -d <span class="o">[</span>dictionary<span class="o">]</span> <span class="o">[</span>input<span class="o">]</span> <span class="o">[</span>output<span class="o">]</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    without dictionary: cmix -d <span class="o">[</span>input<span class="o">]</span> <span class="o">[</span>output<span class="o">]</span></span></span></code></pre></div><hr>
<h2 id="testing-cmix-bee-movie-script"><strong>Testing cmix: Bee Movie Script</strong></h2>
<p>To test cmix, I used the <em>Bee Movie</em> script. Here are the results:</p>
<h3 id="original-file"><strong>Original File</strong></h3>
<ul>
<li>File Size: <strong>86,091 bytes</strong> (~85 KB)</li>
</ul>
<h3 id="compressed-file-cmix"><strong>Compressed File (cmix)</strong></h3>
<ul>
<li>File Size: <strong>21,966 bytes</strong> (~22 KB)</li>
<li>Time Taken: <strong>124.65 seconds</strong></li>
</ul>
<p><img src="/images/btop-bee-movie.jpg" alt="System resource usage displayed using btop, showing one CPU core usage at 100%, 13.9GB of RAM used by the &ldquo;cmix&rdquo; process, and an average CPU usage of 25% for that process for compressing the BEE movie Script."></p>
<p>Command:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">./cmix -c bee-movie.txt bee-movie.txt.cmix
</span></span><span class="line"><span class="ln">2</span><span class="cl">Detected block types: TEXT: 100.0%
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="m">86091</span> bytes -&gt; <span class="m">21966</span> bytes in 124.65 s.
</span></span><span class="line"><span class="ln">4</span><span class="cl">cross entropy: 2.041
</span></span><span class="line"><span class="ln">5</span><span class="cl">
</span></span><span class="line"><span class="ln">6</span><span class="cl">it took 124.65 s.</span></span></code></pre></div><p>Repeated trials brought the time down slightly (108.77 seconds), but it’s still not “fast.” For comparison, I tested other algorithms:</p>
<table>
  <thead>
      <tr>
          <th><strong>Algorithm</strong></th>
          <th><strong>Compressed Size (bytes)</strong></th>
          <th><strong>Time Taken</strong></th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>gzip</td>
          <td>33,765</td>
          <td>~0.5s</td>
      </tr>
      <tr>
          <td>xz</td>
          <td>31,100</td>
          <td>~0.5s</td>
      </tr>
      <tr>
          <td>zstd (level 22)</td>
          <td>31,639</td>
          <td>~0.5s</td>
      </tr>
      <tr>
          <td>zpaq</td>
          <td>25,195</td>
          <td>~0.8s</td>
      </tr>
      <tr>
          <td><strong>cmix</strong></td>
          <td><strong>21,966</strong></td>
          <td><strong>124.65s</strong></td>
      </tr>
  </tbody>
</table>
<p>While cmix achieves the best compression, its time and resource demands are immense.</p>
<hr>
<h2 id="compressing-the-linux-kernel"><strong>Compressing the Linux Kernel</strong></h2>
<p>For a tougher test, I attempted to compress the original Linux 1.0 source code (released on March 13, 1994). Here are the numbers:</p>
<table>
  <thead>
      <tr>
          <th><strong>File</strong></th>
          <th><strong>Size (bytes)</strong></th>
          <th><strong>Time Taken</strong></th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Original</td>
          <td>5171200 (5.0M)</td>
          <td>-</td>
      </tr>
      <tr>
          <td>gzip</td>
          <td>1259175 (1.3M)</td>
          <td>~0.308s</td>
      </tr>
      <tr>
          <td>xz</td>
          <td>935892 (914K)</td>
          <td>~2.895s</td>
      </tr>
      <tr>
          <td>zstd</td>
          <td>697924 (682K)</td>
          <td>~16.73s</td>
      </tr>
      <tr>
          <td><strong>cmix</strong></td>
          <td><strong>516406 (505K)</strong></td>
          <td><strong>7441.04s (131m34.256s)</strong></td>
      </tr>
  </tbody>
</table>
<p><img src="/images/btop-linux-kernel.jpg" alt="The system load shown using btop having cpu at around 60% load, with 16 GB of ram used up by cmix with an average cpu usage of 25% while compressing the linux 1.0 Kernel"></p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="nb">time</span> ./cmix -c ../linux-1.0.tar ../linux-1.0.tar.cmix
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">Detected block types: TEXT: 91.3% DEFAULT: 8.7%
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">progress: 12.32%
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">progress: 20.16%
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="m">5171200</span> bytes -&gt; <span class="m">516406</span> bytes in 7441.04 s.
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">cross entropy: 0.799
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">real    131m34.256s
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">user    121m12.508s
</span></span><span class="line"><span class="ln">10</span><span class="cl">sys     2m52.326s</span></span></code></pre></div><p>I initially planned to test the Linux 6.12.3 tarball (1.54 GB), but cmix proved impractical, taking over 9 minutes to reach just 0.01% progress. Even older versions like Linux 2.5 took too long. This highlights cmix’s limitations with large files.</p>
<hr>
<h2 id="final-thoughts"><strong>Final Thoughts</strong></h2>
<p>Despite its impracticality for everyday use, cmix holds a special place in my heart. It was the first program I compiled while working on my project, <strong>osqr</strong>, and exploring its potential was both fun and enlightening. Compression may feel like a relic of the past, but tools like cmix remind us of the art and science behind squeezing data to its absolute minimum.</p>
<p>If nothing else, cmix is a testament to how far we can push the limits of lossless compression. It may not be practical, but it’s a lot of fun.</p>
<p>What are your thoughts on cmix and other compression algorithms? Let me know below!</p>
]]></content:encoded></item><item><title>Free Cloud Storage - Legal?</title><link>http://localhost:1313/blog/free-cloud-storage-legal/</link><pubDate>Fri, 06 Sep 2024 00:00:00 +0000</pubDate><author>jayeshjoshi08jj@gmail.com (hkcfs)</author><guid>http://localhost:1313/blog/free-cloud-storage-legal/</guid><description>&lt;p>This is not an article about how to get free storage in the traditional sense but rather how to obtain semi-unlimited storage. Don’t think I’m about to talk about &lt;a href="https://www.blomp.com/">Blomp&lt;/a> or &lt;a href="https://www.1024terabox.com/">Terabox&lt;/a> or anything of that sort.&lt;/p>
&lt;h2 id="the-problem-with-free-storage">The Problem with Free Storage&lt;/h2>
&lt;p>Who doesn’t want free storage? But entrusting your data to servers in unknown locations with no clear understanding of how your data is stored, all while being bombarded with ads, is a risky choice.&lt;/p></description><content:encoded><![CDATA[<p>This is not an article about how to get free storage in the traditional sense but rather how to obtain semi-unlimited storage. Don’t think I’m about to talk about <a href="https://www.blomp.com/">Blomp</a> or <a href="https://www.1024terabox.com/">Terabox</a> or anything of that sort.</p>
<h2 id="the-problem-with-free-storage">The Problem with Free Storage</h2>
<p>Who doesn’t want free storage? But entrusting your data to servers in unknown locations with no clear understanding of how your data is stored, all while being bombarded with ads, is a risky choice.</p>
<p>Here’s the truth: these providers have no incentive to keep your data safe or even intact—it’s <em>free</em>, after all. One day, you might log in only to find your data gone or, worse, your entire account deleted.</p>
<h3 id="a-safer-approach">A Safer Approach</h3>
<p>If your data is critical, store it locally or pay for cloud storage. It’s one of the best options available. However, if you’re looking for free, reliable, and privacy-conscious storage, consider options like:</p>
<ul>
<li><a href="https://www.pcloud.com/">pCloud</a></li>
<li><a href="https://mega.nz/">Mega</a></li>
</ul>
<p>Yes, these platforms have their own controversies, but they’re still a better choice than unknown companies. Beware of providers that can change their Terms of Service whenever they wish—one day, they might decide to train AI models on your data without your consent.</p>
<p>If your data isn’t sensitive, you can take the risk with free providers. However, for critical files, encrypt them first using tools like:</p>
<ul>
<li><a href="https://cryptomator.org/">Cryptomator</a></li>
<li><a href="https://www.borgbackup.org/">Borg</a></li>
<li><a href="https://kopia.io/">Kopia</a></li>
</ul>
<p>These are complete backup solutions that include robust encryption. Personally, I’ve been using <strong>Kopia</strong> as my primary backup tool for a long time, and it has never let me down.</p>
<h2 id="enter-rclone-the-game-changer">Enter Rclone: The Game-Changer</h2>
<p><a href="https://rclone.org/">Rclone</a> is a powerful tool for syncing files between cloud and local storage. One of its standout features is <strong>union</strong>, which allows you to merge multiple cloud accounts into one unified storage pool. This feature can effectively give you semi-unlimited storage by combining the free storage offered by multiple providers.</p>
<hr>
<h3 id="rclone-union-diagram">Rclone Union Diagram</h3>
<p>Here’s a simplified diagram explaining how Rclone’s <strong>union</strong> works:</p>


















<figure id="diagram-1" class="diagram-figure">
  
    <svg class="cloud_storage_merge diagram-svg"
         width="208"
         height="233"
         xmlns="http://www.w3.org/2000/svg"
         version="1.1"
         role="img"
         aria-labelledby="title-1 desc-1">
      <title id="title-1">Cloud Storage Union:</title>
      <desc id="desc-1">Detailed description of Cloud Storage Union:  Cloud A (50GB) &#43; Cloud B (30GB) → combine storage (80GB)</desc>
      <g transform='translate(8,16)'>
<path d='M 32,32 L 192,32' fill='none' stroke='currentColor'></path>
<path d='M 32,64 L 192,64' fill='none' stroke='currentColor'></path>
<path d='M 32,96 L 192,96' fill='none' stroke='currentColor'></path>
<path d='M 32,128 L 192,128' fill='none' stroke='currentColor'></path>
<path d='M 32,160 L 192,160' fill='none' stroke='currentColor'></path>
<path d='M 32,208 L 192,208' fill='none' stroke='currentColor'></path>
<path d='M 32,32 L 32,64' fill='none' stroke='currentColor'></path>
<path d='M 32,96 L 32,128' fill='none' stroke='currentColor'></path>
<path d='M 32,160 L 32,208' fill='none' stroke='currentColor'></path>
<path d='M 192,32 L 192,64' fill='none' stroke='currentColor'></path>
<path d='M 192,96 L 192,128' fill='none' stroke='currentColor'></path>
<path d='M 192,160 L 192,208' fill='none' stroke='currentColor'></path>
<text text-anchor='middle' x='0' y='4' fill='currentColor' style='font-size:1em'>C</text>
<text text-anchor='middle' x='8' y='4' fill='currentColor' style='font-size:1em'>l</text>
<text text-anchor='middle' x='16' y='4' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='24' y='4' fill='currentColor' style='font-size:1em'>u</text>
<text text-anchor='middle' x='32' y='4' fill='currentColor' style='font-size:1em'>d</text>
<text text-anchor='middle' x='48' y='4' fill='currentColor' style='font-size:1em'>S</text>
<text text-anchor='middle' x='48' y='180' fill='currentColor' style='font-size:1em'>C</text>
<text text-anchor='middle' x='56' y='4' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='56' y='180' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='64' y='4' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='64' y='180' fill='currentColor' style='font-size:1em'>m</text>
<text text-anchor='middle' x='72' y='4' fill='currentColor' style='font-size:1em'>r</text>
<text text-anchor='middle' x='72' y='52' fill='currentColor' style='font-size:1em'>C</text>
<text text-anchor='middle' x='72' y='116' fill='currentColor' style='font-size:1em'>C</text>
<text text-anchor='middle' x='72' y='180' fill='currentColor' style='font-size:1em'>b</text>
<text text-anchor='middle' x='80' y='4' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='80' y='52' fill='currentColor' style='font-size:1em'>l</text>
<text text-anchor='middle' x='80' y='116' fill='currentColor' style='font-size:1em'>l</text>
<text text-anchor='middle' x='80' y='180' fill='currentColor' style='font-size:1em'>i</text>
<text text-anchor='middle' x='88' y='4' fill='currentColor' style='font-size:1em'>g</text>
<text text-anchor='middle' x='88' y='52' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='88' y='116' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='88' y='180' fill='currentColor' style='font-size:1em'>n</text>
<text text-anchor='middle' x='88' y='196' fill='currentColor' style='font-size:1em'>(</text>
<text text-anchor='middle' x='96' y='4' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='96' y='52' fill='currentColor' style='font-size:1em'>u</text>
<text text-anchor='middle' x='96' y='116' fill='currentColor' style='font-size:1em'>u</text>
<text text-anchor='middle' x='96' y='180' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='96' y='196' fill='currentColor' style='font-size:1em'>8</text>
<text text-anchor='middle' x='104' y='52' fill='currentColor' style='font-size:1em'>d</text>
<text text-anchor='middle' x='104' y='116' fill='currentColor' style='font-size:1em'>d</text>
<text text-anchor='middle' x='104' y='180' fill='currentColor' style='font-size:1em'>d</text>
<text text-anchor='middle' x='104' y='196' fill='currentColor' style='font-size:1em'>0</text>
<text text-anchor='middle' x='112' y='4' fill='currentColor' style='font-size:1em'>U</text>
<text text-anchor='middle' x='112' y='84' fill='currentColor' style='font-size:1em'>↓</text>
<text text-anchor='middle' x='112' y='148' fill='currentColor' style='font-size:1em'>↓</text>
<text text-anchor='middle' x='112' y='196' fill='currentColor' style='font-size:1em'>G</text>
<text text-anchor='middle' x='120' y='4' fill='currentColor' style='font-size:1em'>n</text>
<text text-anchor='middle' x='120' y='52' fill='currentColor' style='font-size:1em'>A</text>
<text text-anchor='middle' x='120' y='116' fill='currentColor' style='font-size:1em'>B</text>
<text text-anchor='middle' x='120' y='180' fill='currentColor' style='font-size:1em'>S</text>
<text text-anchor='middle' x='120' y='196' fill='currentColor' style='font-size:1em'>B</text>
<text text-anchor='middle' x='128' y='4' fill='currentColor' style='font-size:1em'>i</text>
<text text-anchor='middle' x='128' y='180' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='128' y='196' fill='currentColor' style='font-size:1em'>)</text>
<text text-anchor='middle' x='136' y='4' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='136' y='52' fill='currentColor' style='font-size:1em'>(</text>
<text text-anchor='middle' x='136' y='116' fill='currentColor' style='font-size:1em'>(</text>
<text text-anchor='middle' x='136' y='180' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='144' y='4' fill='currentColor' style='font-size:1em'>n</text>
<text text-anchor='middle' x='144' y='52' fill='currentColor' style='font-size:1em'>5</text>
<text text-anchor='middle' x='144' y='116' fill='currentColor' style='font-size:1em'>3</text>
<text text-anchor='middle' x='144' y='180' fill='currentColor' style='font-size:1em'>r</text>
<text text-anchor='middle' x='152' y='4' fill='currentColor' style='font-size:1em'>:</text>
<text text-anchor='middle' x='152' y='52' fill='currentColor' style='font-size:1em'>0</text>
<text text-anchor='middle' x='152' y='116' fill='currentColor' style='font-size:1em'>0</text>
<text text-anchor='middle' x='152' y='180' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='160' y='52' fill='currentColor' style='font-size:1em'>G</text>
<text text-anchor='middle' x='160' y='116' fill='currentColor' style='font-size:1em'>G</text>
<text text-anchor='middle' x='160' y='180' fill='currentColor' style='font-size:1em'>g</text>
<text text-anchor='middle' x='168' y='52' fill='currentColor' style='font-size:1em'>B</text>
<text text-anchor='middle' x='168' y='116' fill='currentColor' style='font-size:1em'>B</text>
<text text-anchor='middle' x='168' y='180' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='176' y='52' fill='currentColor' style='font-size:1em'>)</text>
<text text-anchor='middle' x='176' y='116' fill='currentColor' style='font-size:1em'>)</text>
</g>

    </svg>
  
  <figcaption>Figure 1: Cloud Storage Consolidation, merging process between two cloud platforms, demonstrating how Cloud A (50GB) and Cloud B (30GB) combine to create a unified storage solution of 80GB total capacity.</figcaption>
</figure>
<p>Rclone treats the individual accounts (Cloud A and Cloud B) as parts of a single, larger storage unit. This seamless integration makes it possible to manage multiple accounts as if they were one.</p>
<hr>
<h3 id="setting-up-rclone-union">Setting Up Rclone Union</h3>
<p>Here’s an example of how to set up <strong>union</strong> with two cloud providers:</p>
<ol>
<li><strong>Install Rclone</strong>: Follow the <a href="https://rclone.org/install/">installation guide</a>.</li>
<li><strong>Configure Individual Remotes</strong>: Use <code>rclone config</code> to set up connections to your cloud providers (e.g., Google Drive and Dropbox).</li>
<li><strong>Create a Union Remote</strong>: Add a new remote in your Rclone config file for the union. Example setup:</li>
</ol>





<pre tabindex="0"><code class="language-config" data-lang="config">[merged]
type = union
upstreams = gdrive: dropbox:
search_policy = ff
min_free_space = 100Mi
description = Combined cloud storage
action_policy = eplfs
create_policy = epmfs</code></pre><hr>
<h3 id="explaining-the-config-snippet">Explaining the Config Snippet</h3>
<ul>
<li><strong>[merged]</strong>: The name of the union remote.</li>
<li><strong>upstreams</strong>: The individual remotes being combined. Replace <code>gdrive:</code> and <code>dropbox:</code> with your actual remote names.</li>
<li><strong>search_policy</strong>: Defines how Rclone searches for files, using the <em>first found</em> policy there are other&rsquo;s avliable too.</li>
<li><strong>min_free_space</strong>: Ensures there’s at least 100 MiB free across the union before new files are uploaded.</li>
<li><strong>action_policy</strong> &amp; <strong>create_policy</strong>: Decide where actions (like deleting or creating files) occur, prioritizing paths based on available space or existing files others are avliable too but, i can&rsquo;t understat it soo.</li>
</ul>
<hr>
<h3 id="final-thoughts">Final Thoughts</h3>
<p>Using Rclone’s <strong>union</strong> feature, I’ve successfully merged two cloud accounts into an 80GB virtual storage pool. This is a fantastic way to maximize free cloud storage if you’re willing to put in a bit of effort.</p>
<p>Remember, always encrypt sensitive files before uploading them to any cloud storage service. Tools like Rclone combined with encryption solutions can make free storage both effective and secure.</p>
]]></content:encoded></item><item><title>New File System - Not NTFS</title><link>http://localhost:1313/blog/new-file-system-not-ntfs/</link><pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate><author>jayeshjoshi08jj@gmail.com (hkcfs)</author><guid>http://localhost:1313/blog/new-file-system-not-ntfs/</guid><description>&lt;h2 id="bcachefs">Bcachefs&lt;/h2>
&lt;p>A copy-on-write (COW) file system for Linux aimed at people who want XFS speed with ZFS/BTRFS features. &lt;a href="https://bcachefs.org/">Learn more&lt;/a>.&lt;/p>
&lt;p>Bcachefs, a relatively new file system (though technically over 10 years old), has been gaining traction. So, naturally, I did the obvious thing: ignored it. However, after its merger into Kernel 6.7, I realized the hype might be overblown. I could be wrong, but for me, it feels like just another BTRFS for SSDs, with encryption and some ZFS features. It doesn’t bring anything new to the table.&lt;/p></description><content:encoded><![CDATA[<h2 id="bcachefs">Bcachefs</h2>
<p>A copy-on-write (COW) file system for Linux aimed at people who want XFS speed with ZFS/BTRFS features. <a href="https://bcachefs.org/">Learn more</a>.</p>
<p>Bcachefs, a relatively new file system (though technically over 10 years old), has been gaining traction. So, naturally, I did the obvious thing: ignored it. However, after its merger into Kernel 6.7, I realized the hype might be overblown. I could be wrong, but for me, it feels like just another BTRFS for SSDs, with encryption and some ZFS features. It doesn’t bring anything new to the table.</p>
<p>Bcachefs isn’t as fast as it seems. It’s still in heavy development, and I don’t believe it’s very stable yet. While many people praise it, beyond the surface, it doesn’t seem revolutionary. Maybe it’s my bias toward BTRFS, but Bcachefs feels slower, especially with large numbers of small files. Where Bcache would excel with millions of small files, Bcachefs feels like it’s on the verge of crashing.</p>
<p>Although my experience with it hasn’t been great, I hope it improves so we have real competition for BTRFS.</p>
<h2 id="stratis">Stratis</h2>
<p>An interesting toolset around XFS. Stratis simplifies configuring pools and filesystems with enhanced storage functionality, working within the existing Linux storage management stack. <a href="https://stratis-storage.github.io/">Learn more</a>.</p>
<p>Stratis takes a unique approach by not reinventing the wheel. Instead, it uses existing filesystems like XFS (which is very fast, though not feature-rich) and modernizes them.</p>
<p>However, Stratis tries to include every feature under the sun, which may be slowing it down. My testing indicates it’s the most unstable filesystem compared to XFS, BTRFS, or Bcachefs. Even though it’s a new project, it somehow manages to destabilize XFS—a filesystem known for its reliability.</p>
<p>Stratis feels like an overcomplicated ZFS. While it can be argued that BTRFS is also complex, it tries to acknowledge its complexity. Stratis, on the other hand, doesn’t make much sense to me. This might be due to my lack of experience with ZFS or OpenZFS, leaving me feeling lost.</p>
<p>Perhaps if a big player like Meta starts using Stratis, I might revisit it to see how it has evolved.</p>
]]></content:encoded></item><item><title>BTRFS - the Best FileSystem</title><link>http://localhost:1313/blog/btrfs-the-best-filesystem/</link><pubDate>Tue, 30 Jul 2024 00:00:00 +0000</pubDate><author>jayeshjoshi08jj@gmail.com (hkcfs)</author><guid>http://localhost:1313/blog/btrfs-the-best-filesystem/</guid><description>&lt;p>B.T.R.F.S., B-tree FS, Butter FS, or whatever you want to call it, I would argue, is one of the best filesystems, at least for me.&lt;/p>
&lt;p>BTRFS is a filesystem just like any other, but its features compel users to try it. This is what has made me a lover of it. There is a reason why Facebook (Meta) uses it, and Oracle used to develop it.&lt;/p>
&lt;p>One of the best things I love about BTRFS is snapshots and compression, which I live by. No longer are the days where updating Arch (~btw) feels like terror about to strike or a new package or massive update (e.g., KDE5 to KDE6) can kill or break your system.&lt;/p></description><content:encoded><![CDATA[<p>B.T.R.F.S., B-tree FS, Butter FS, or whatever you want to call it, I would argue, is one of the best filesystems, at least for me.</p>
<p>BTRFS is a filesystem just like any other, but its features compel users to try it. This is what has made me a lover of it. There is a reason why Facebook (Meta) uses it, and Oracle used to develop it.</p>
<p>One of the best things I love about BTRFS is snapshots and compression, which I live by. No longer are the days where updating Arch (~btw) feels like terror about to strike or a new package or massive update (e.g., KDE5 to KDE6) can kill or break your system.</p>
<p>I have an old Dell laptop with 4GB RAM and an Intel Pentium N-something—not powerful. It cannot even play unmodded Minecraft at 30 FPS or any powerful game. It does not have an HDD because, when I opened it for the very first time (it was my first laptop, and I had never opened a laptop or fixed a computer before), I broke the cable. The HDD was fine, but that garbage cable is so damn weak. I could just blow air on it, and it would break. So, I installed Arch Linux on a 16GB spare USB thumb drive, which—even if it breaks—it does not matter, as it’s a small USB drive:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln">1</span><span class="cl">rw, noatime, compress=zstd:5, nossd, space_cache=v2, autodefrag, commit=120, subvolid=302, subvol=~~somethings~~</span></span></code></pre></div><p>These are my options on the HDD, which I primarily used for data storage. I have been using it for the last two years, and it has served me well since then.</p>
<p>The thumb drive runs F2FS with compression and some other optimizations, which I took for AI. It runs quite well, and my minimal install of Arch only uses ~4GB compressed with multiple browsers and LabWC—all the comfort I want.</p>
]]></content:encoded></item><item><title>Backups - we all have them right ?</title><link>http://localhost:1313/blog/backups-we-all-have-them-right/</link><pubDate>Wed, 24 Jul 2024 00:00:00 +0000</pubDate><author>jayeshjoshi08jj@gmail.com (hkcfs)</author><guid>http://localhost:1313/blog/backups-we-all-have-them-right/</guid><description>&lt;p>Backups - we all have them, right?&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;A backup isn’t just about saving data; it’s about saving yourself from the regret of losing what matters most.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>Well, backups are the bane of my existence. No, really. I have multiple backups of all my data. I try to follow the 3-2-1 backup plan, which means:&lt;/p>
&lt;ul>
&lt;li>3 Copies of Data&lt;/li>
&lt;li>2 Different Media&lt;/li>
&lt;li>1 Copy Offsite
&lt;a href="https://www.backblaze.com/blog/the-3-2-1-backup-strategy">Learn more&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>This is what I generally like to do, but most of my data pre-COVID was scattered across multiple HDDs with no plan for where the data was stored and no automation.&lt;/p></description><content:encoded><![CDATA[<p>Backups - we all have them, right?</p>
<blockquote>
<p>&ldquo;A backup isn’t just about saving data; it’s about saving yourself from the regret of losing what matters most.&rdquo;</p>
</blockquote>
<p>Well, backups are the bane of my existence. No, really. I have multiple backups of all my data. I try to follow the 3-2-1 backup plan, which means:</p>
<ul>
<li>3 Copies of Data</li>
<li>2 Different Media</li>
<li>1 Copy Offsite
<a href="https://www.backblaze.com/blog/the-3-2-1-backup-strategy">Learn more</a>.</li>
</ul>
<p>This is what I generally like to do, but most of my data pre-COVID was scattered across multiple HDDs with no plan for where the data was stored and no automation.</p>
<p>Things have changed, and now I have a proper backup plan and offsite backup with Mega Cloud. Many might not like Mega Cloud because of its controversial history, especially involving its creator, <a href="https://en.wikipedia.org/wiki/Kim_Dotcom">Kim Dotcom</a>. However, I feel it’s a good platform with security in mind. That said, it doesn’t have a great history, so I still encrypt everything locally on a Linux box before sending the data to any cloud, as <strong>the cloud is just someone else’s computer</strong>. Always believe that anyone can view or modify that data. If you’re on a free plan like me, keep redundancy in mind. Losing a &ldquo;free&rdquo; account with all your data is not something any cloud service provider will care about. So, go for the cheapest plan if you want to.</p>
<p>If you want to go free, do so with caution, and always keep in mind that data can be lost at any time. Always keep a local backup or something that might help you when disaster strikes.</p>
<p>Backups are a very personal thing. Many of us have very different requirements, and there is no one great tool or solution for all. Experimentation is very much encouraged. But just have a backup—it’s much better than being among the 50% of people who have no backup.</p>
<p>For example, YouTubers might have a lot of videos and images, so they might need multiple TBs of storage. But someone like me, who has some images, videos, a simple blog, and configuration files, might only need around 50GB. My current backup is ~67GB, including images, videos, configuration files, and important documents. I use Mega and have been for a long time. Mega only gives you 20GB free now, but when I created my account, it gave me 50GB, which is now very much filled with less than 2GB free.</p>
<p>I suggest that anyone about to back up seriously should first check their needs. Can it just be handled with a free account, or do you need more, like a subscription? I would say if you have less than 150GB, then the free tier would be enough, though above 100GB, it would be a stretch. But if you have more than that, then a paid solution would suit you well. No matter what, if you do not have a backup, then do it now. Even just having a copy on an external drive is better than no backup. Take action now—your future self will thank you.</p>
]]></content:encoded></item><item><title>Arch Linux - BTW</title><link>http://localhost:1313/blog/arch-linux-btw/</link><pubDate>Sun, 21 Jul 2024 00:00:00 +0000</pubDate><author>jayeshjoshi08jj@gmail.com (hkcfs)</author><guid>http://localhost:1313/blog/arch-linux-btw/</guid><description>&lt;blockquote>
&lt;p>&amp;ldquo;I have been using Arch Linux for the longest time, and it has been a great system—or at least, that’s what I would say in a perfect world.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>Arch Linux is like LFS (Linux From Scratch) but simpler. Since the introduction of &lt;code>archinstall&lt;/code>, it has become more&amp;hellip; let’s just say &amp;ldquo;dumber,&amp;rdquo; though it’s still quite a good system.&lt;/p>
&lt;p>If you want to learn about a Linux system but don’t want to waste 60+ hours of your life on Gentoo before binaries, it’s quite a good distro. However, I wouldn’t recommend using the &lt;code>archinstall&lt;/code> system. What’s the point if you do? I’d only recommend Arch if you know what you’re doing or if you’ve manually installed it at least twice with custom settings, like using BTRFS, custom repositories, or even Artix instead of Arch.&lt;/p></description><content:encoded><![CDATA[<blockquote>
<p>&ldquo;I have been using Arch Linux for the longest time, and it has been a great system—or at least, that’s what I would say in a perfect world.&rdquo;</p>
</blockquote>
<p>Arch Linux is like LFS (Linux From Scratch) but simpler. Since the introduction of <code>archinstall</code>, it has become more&hellip; let’s just say &ldquo;dumber,&rdquo; though it’s still quite a good system.</p>
<p>If you want to learn about a Linux system but don’t want to waste 60+ hours of your life on Gentoo before binaries, it’s quite a good distro. However, I wouldn’t recommend using the <code>archinstall</code> system. What’s the point if you do? I’d only recommend Arch if you know what you’re doing or if you’ve manually installed it at least twice with custom settings, like using BTRFS, custom repositories, or even Artix instead of Arch.</p>
<p>Arch is a rolling release, which means it doesn’t have defined versions like most software. It just keeps updating—and will do so as long as it’s maintained.</p>
<p>That said, it comes with its own set of challenges. If you want to do something unique, like running Linux from Google Drive (<a href="https://ersei.net/en/blog/fuse-root">source</a>), Arch Linux can handle it. Though, I would argue Alpine Linux is better for such cases.</p>
<p>All in all, Arch is a flexible, minimal, and community-driven Linux distro. People love it, and so do I. It has its challenges, but there’s a reason why I keep switching back to it.</p>
]]></content:encoded></item><item><title>The FileSystem Hell - for flash</title><link>http://localhost:1313/blog/the-filesystem-hell-for-flash/</link><pubDate>Wed, 08 May 2024 00:00:00 +0000</pubDate><author>jayeshjoshi08jj@gmail.com (hkcfs)</author><guid>http://localhost:1313/blog/the-filesystem-hell-for-flash/</guid><description>&lt;p>How I almost killed my thumb drive.&lt;/p>
&lt;p>I have been using Arch on a 16GB thumb drive, which is quite ironic as I have a spare HDD. But I wanted to use that thumb drive as it is small, fast, and efficient and has no moving parts, unlike the hard drive.&lt;/p>
&lt;p>At first, I used my favorite filesystem, BTRFS, with SSD options but felt like it had slowed my drive. But how could that be? I had used the most optimized version and options (definitely not taken for the AI overlords), but something did not feel right. Oh boy, we’re going into a deep rabbit hole.&lt;/p></description><content:encoded><![CDATA[<p>How I almost killed my thumb drive.</p>
<p>I have been using Arch on a 16GB thumb drive, which is quite ironic as I have a spare HDD. But I wanted to use that thumb drive as it is small, fast, and efficient and has no moving parts, unlike the hard drive.</p>
<p>At first, I used my favorite filesystem, BTRFS, with SSD options but felt like it had slowed my drive. But how could that be? I had used the most optimized version and options (definitely not taken for the AI overlords), but something did not feel right. Oh boy, we’re going into a deep rabbit hole.</p>
<p>SSDs and flash drives are quite different. Though they both use the same NAND flash technology, internally, they are different. The controller of the chip is not at all the same, and the lack of DRAM cache in thumb drives—though some thumb drives have small amounts of cache—is still quite less than the DRAM cache that modern SSDs have.</p>
<p>SSDs have many features that are not present in cheap thumb drives, like TRIM, which helps the SSD recycle discarded data and prolong its lifespan; S.M.A.R.T., which gives you stats about the SSD or HDD; wear leveling; wear amplification; and encryption, just to name a few. These features are either simplified or missing in USB thumb drives, which is not good for BTRFS. So, for that, I tried many filesystems (e.g., F2FS, JFFS2) from <a href="https://en.wikipedia.org/wiki/List_of_file_systems#File_systems_optimized_for_flash_memory,_solid_state_media">this list</a>.</p>
<p>But there was a bigger problem. Flash drives are dumb. Their controllers are basically &ldquo;data goes here,&rdquo; and that’s it—or so I thought. Because there is no standard or quality in flash drives, some have cache, and some do not. Some have advanced features, and some do not. Some even have ECC, but most of them do not. So, it is kind of a hit-or-miss situation for choosing a filesystem.</p>
<p>I first went with JFFS2 and later UBIFS, which felt limiting as I came from BTRFS. But I got used to it. However, it happened. I saw something I shouldn’t have—the Flash Translation Layer (<a href="https://en.wikipedia.org/wiki/Flash_memory_controller#Flash_translation_layer_%28FTL%29_and_mapping">FTL</a>). It basically unlocked a new fear: killing cheap flash drives quickly. The TL;DR is that FTL manages where data goes and has some features which make it smarter than raw NAND or NOR flash chips. I felt incredibly dumb and thought that instead of increasing its lifespan, I was shortening it. I quickly switched to F2FS, which was not a challenge at all.</p>
<p>The switch was needed as JFFS2 or UBIFS are meant for low-level raw NAND flash, not something with a controller. By using them, I was putting a lot of stress on the drive, which is not good as they do not have a long read/write cycle—much less compared to a solid-state drive. It has been two years, and I am still using that very same flash drive with F2FS.</p>
]]></content:encoded></item></channel></rss>