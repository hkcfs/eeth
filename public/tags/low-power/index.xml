<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Low Power on EETH - Blog</title>
    <link>https://eeth.pages.dev/tags/low-power/</link>
    <description>Recent content in Low Power on EETH - Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <managingEditor>jayeshjoshi08jj@gmail.com (hkcfs)</managingEditor>
    <webMaster>jayeshjoshi08jj@gmail.com (hkcfs)</webMaster>
    <copyright>hkcfs</copyright>
    <lastBuildDate>Wed, 30 Jul 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://eeth.pages.dev/tags/low-power/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>My Pocket-Sized Network King: OpenWrt on a 16MB TP-Link</title>
      <link>https://eeth.pages.dev/blog/my-not-so-pocket-sized-network-king-openwrt-on-a-16mib-tp-link/</link>
      <pubDate>Wed, 30 Jul 2025 00:00:00 +0000</pubDate><author>jayeshjoshi08jj@gmail.com (hkcfs)</author>
      <guid>https://eeth.pages.dev/blog/my-not-so-pocket-sized-network-king-openwrt-on-a-16mib-tp-link/</guid>
      <description>&lt;p&gt;In network infrastructure, the prevailing wisdom dictates robust hardware with ample resources. Yet, the true power of embedded Linux lies in its ability to transform even the most humble devices into surprisingly capable network workhorses. This is the story of my unassuming TP-Link router, boasting a mere &lt;strong&gt;16MB of flash storage&lt;/strong&gt; and &lt;strong&gt;128MB of RAM&lt;/strong&gt;, which I&amp;rsquo;ve elevated to a highly customized, secure, and performant network hub using OpenWrt.&lt;/p&gt;&#xA;&lt;p&gt;Many would consider such hardware obsolete, quickly replaced by feature-rich, multi-gigabit consumer units. However, with OpenWrt, an outdated router transcends its factory limitations, offering granular control and advanced functionalities that belie its specifications. This isn&amp;rsquo;t merely about recycling old hardware; it&amp;rsquo;s about engineering a bespoke network environment on a shoestring budget of resources.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>In network infrastructure, the prevailing wisdom dictates robust hardware with ample resources. Yet, the true power of embedded Linux lies in its ability to transform even the most humble devices into surprisingly capable network workhorses. This is the story of my unassuming TP-Link router, boasting a mere <strong>16MB of flash storage</strong> and <strong>128MB of RAM</strong>, which I&rsquo;ve elevated to a highly customized, secure, and performant network hub using OpenWrt.</p>
<p>Many would consider such hardware obsolete, quickly replaced by feature-rich, multi-gigabit consumer units. However, with OpenWrt, an outdated router transcends its factory limitations, offering granular control and advanced functionalities that belie its specifications. This isn&rsquo;t merely about recycling old hardware; it&rsquo;s about engineering a bespoke network environment on a shoestring budget of resources.</p>
<h2 id="the-hardware-underdog-a-lesson-in-resourcefulness">The Hardware Underdog: A Lesson in Resourcefulness</h2>
<p>Let&rsquo;s enumerate the modest specifications of this TP-Link device:</p>
<ul>
<li><strong>Flash Storage:</strong> A minuscule <strong>16MB</strong>. Every kilobyte here is a precious commodity. Package selection and custom firmware builds are critical to fit within this constraint.</li>
<li><strong>RAM:</strong> <strong>128MB</strong>. While seemingly low, for a dedicated router, it&rsquo;s manageable. However, the OpenWrt base system itself consumes a significant portion, typically around <strong>88MB</strong>, leaving roughly <strong>~40MB of free RAM</strong> for custom services.</li>
<li><strong>Processor:</strong> A low-power MIPS or ARM SoC, optimized for network forwarding rather than heavy computation. It efficiently handles packet routing but will bottleneck on CPU-intensive tasks.</li>
<li><strong>Ethernet Ports:</strong> Despite its other limitations, this router is equipped with <strong>1Gbps (Gigabit Ethernet) ports</strong>.</li>
<li><strong>Network Interface Anomaly:</strong> The primary onboard Ethernet port is non-functional, necessitating a <strong>USB-to-Ethernet adapter</strong> for wired connectivity. This introduces additional USB bus overhead and a potential bottleneck, despite the 1Gbps physical ports.</li>
</ul>
<p>This device was designed for basic home connectivity. Yet, re-imagined with OpenWrt, it forms the highly functional core of my network.</p>
<h2 id="openwrt-linux-reimagined-for-routers">OpenWrt: Linux Reimagined for Routers</h2>
<p><strong>OpenWrt</strong> is an open-source Linux distribution specifically engineered for embedded devices like wireless routers. It&rsquo;s not just a firmware upgrade; it&rsquo;s a complete operating system replacement that provides full control.</p>
<ul>
<li><strong>Linux Kernel Foundation:</strong> OpenWrt runs a full Linux kernel, inheriting its stability, security, and the ability to leverage a vast ecosystem of open-source software packages.</li>
<li><strong>Unparalleled Customization:</strong> Unlike vendor firmware, OpenWrt provides complete control, from low-level network settings to user-space applications.</li>
<li><strong>Designed for Efficiency:</strong> OpenWrt is built from the ground up for resource-constrained hardware. It optimizes for minimal CPU, RAM, and flash usage, making it an ideal candidate for this 16MB/128MB device.</li>
<li><strong>Robust Community Support:</strong> A strong, active community continuously develops new features, patches security vulnerabilities, and provides extensive documentation.</li>
</ul>
<p>Flashing OpenWrt involves replacing the existing proprietary firmware. This process is highly specific to each router model, sometimes a straightforward web UI upload, other times requiring more involved methods like TFTP or serial console access. <strong>Always ensure you download the precise firmware image for your exact router revision</strong> from the official OpenWrt website to avoid bricking your device.</p>
<ul>
<li><strong>Device Compatibility:</strong> Consult the <a href="https://openwrt.org/toh/start">OpenWrt Wiki: Table of Hardware</a> to confirm support for your specific router model and access installation guides.</li>
<li><strong>Installation Overview:</strong> The <a href="https://openwrt.org/docs/guide-user/installation/overview">OpenWrt Wiki: Generic Installation Guide</a> offers general steps for flashing.</li>
</ul>
<h2 id="the-network-stack-sculpting-a-custom-environment">The Network Stack: Sculpting a Custom Environment</h2>
<p>Once OpenWrt is installed, the true potential of this hardware begins to unfold. Despite the stringent resource limitations, I&rsquo;ve implemented a sophisticated network configuration:</p>
<ul>
<li>
<p><strong>Custom VLANs (Virtual Local Area Networks):</strong></p>
<ul>
<li><strong>Purpose:</strong> VLANs allow for the logical segmentation of network traffic over a single physical network interface. It effectively creates multiple distinct, isolated broadcast domains.</li>
<li><strong>Implementation:</strong> I leverage VLANs to segment network traffic based on trust levels. For instance, I&rsquo;ve established a dedicated <strong>Guest Wi-Fi network</strong> that is entirely isolated from my primary LAN, preventing guest devices from accessing internal resources. Similarly, my <strong>IoT (Internet of Things) devices</strong> reside on their own VLAN, mitigating potential security risks should one be compromised. This containment strategy is paramount for network security.</li>
<li><strong>Configuration:</strong> VLANs are primarily configured via OpenWrt&rsquo;s network configuration files (<code>/etc/config/network</code>) and can be managed through the LuCI web interface. This involves defining interfaces, bridges, and assigning VLAN tags to specific wired ports or Wi-Fi SSIDs.</li>
</ul>
</li>
<li>
<p><strong>Network-Wide Ad-Blocking (Leveraging <code>adblock-lean</code>):</strong></p>
<ul>
<li><strong>Purpose:</strong> To eliminate advertisements and tracking scripts at the DNS level for all devices connected to the network.</li>
<li><strong>Implementation:</strong> Rather than resource-intensive solutions like <code>AdGuard Home</code> or <code>Pi-hole</code>, which are unsuitable for this router&rsquo;s limited RAM, I utilize a minimalist approach. This involves configuring <strong>Dnsmasq</strong> (OpenWrt&rsquo;s default DNS and DHCP server) to filter domains using <strong><code>adblock-lean</code></strong> (<a href="https://github.com/lynxthecat/adblock-lean">https://github.com/lynxthecat/adblock-lean</a>). <code>adblock-lean</code> is specifically designed for low-memory devices, providing efficient blocklist management within Dnsmasq.</li>
<li><strong>Benefits:</strong> This setup provides ubiquitous ad and tracker blocking across all devices (smartphones, smart TVs, PCs) without requiring individual client-side software. This enhances privacy, reduces bandwidth consumption, and improves browsing performance.</li>
<li><strong>Upstream DNS:</strong> Dnsmasq is further configured to forward unblocked queries to privacy-centric upstream DNS resolvers, such as Cloudflare DNS (<code>1.1.1.1</code>) or Quad9 (<code>9.9.9.9</code>), bolstering network-wide privacy.</li>
</ul>
</li>
</ul>
<h2 id="resource-allocation-the-art-of-precision">Resource Allocation: The Art of Precision</h2>
<p>Operating within 16MB of flash and approximately 40MB of usable RAM demands extreme precision in software selection and configuration:</p>
<ul>
<li><strong>Flash Constraints:</strong> The 16MB flash capacity dictates a strictly minimal OpenWrt image. Only core networking packages and highly optimized utilities can be installed. Any non-essential components are omitted during the firmware build process.</li>
<li><strong>RAM Management:</strong> With only ~40MB of free RAM, every running process must be exceptionally lean. This necessitates the use of C-based command-line utilities and careful avoidance of larger applications, dynamic scripting environments, or anything with significant background daemon overhead. OpenWrt&rsquo;s core packages are engineered for this efficiency, boasting small binary sizes and optimized runtime memory footprints.</li>
<li><strong>No Containerization:</strong> Unlike my NAS project, running Docker or Podman containers on this router is entirely infeasible due to the flash and RAM limitations. All services are installed directly as native OpenWrt packages, leveraging existing system libraries for maximal efficiency.</li>
</ul>
<p>Despite these severe constraints, the router maintains remarkable <strong>stability and responsiveness</strong> for its defined networking roles. It efficiently routes traffic, enforces VLAN rules, and performs DNS-based ad-blocking without perceptible performance degradation.</p>
<h2 id="network-performance-and-power-economy-defying-conventional-wisdom">Network Performance and Power Economy: Defying Conventional Wisdom</h2>
<p>The router&rsquo;s <strong>1Gbps Ethernet ports</strong> provide a theoretical throughput of 1 Gigabit per second. However, the reliance on a <strong>USB-to-Ethernet adapter</strong> introduces a practical bottleneck. While the adapter itself might be rated for Gigabit speeds, the underlying USB bus overhead can cap real-world performance, especially when multiple devices are saturating the connection or the CPU is under load from other tasks. For typical home usage, however, this setup still delivers robust and fast connectivity, often exceeding the requirements of most consumer internet connections.</p>
<p>Crucially, the power consumption of this humble setup is a significant advantage, especially in regions with high electricity costs:</p>
<ul>
<li><strong>Idle Power Draw:</strong> Typically a mere <strong>3-5 watts</strong>. This is the consumption for the entire device, operating 24/7.</li>
<li><strong>Max Load Power Draw:</strong> Even under heavy network traffic or when the CPU is active (e.g., handling many DNS queries), the consumption generally stays below <strong>7-10 watts</strong>.</li>
</ul>
<p>This translates to an exceptionally low operational cost over time, making it an economically and environmentally sound choice for an always-on network device.</p>
<h2 id="conclusion-maximizing-potential-minimizing-waste">Conclusion: Maximizing Potential, Minimizing Waste</h2>
<p>My humble TP-Link router, transformed by OpenWrt, stands as a powerful demonstration of what&rsquo;s achievable with minimalist computing. It proves that you don&rsquo;t need a state-of-the-art, expensive appliance to build a highly customized, secure, and energy-efficient home network.</p>
<p>This setup delivers:</p>
<ul>
<li><strong>Enhanced Security:</strong> Through rigorous VLAN segmentation and proactive ad/tracker blocking.</li>
<li><strong>Improved Privacy:</strong> By localizing DNS resolution and minimizing external data leakage.</li>
<li><strong>Optimized Performance:</strong> By stripping away bloat and focusing on core networking functions.</li>
<li><strong>Sustainable Computing:</strong> By repurposing hardware that would typically be discarded, contributing to reduced electronic waste.</li>
</ul>
<p>If you possess an old, seemingly &ldquo;obsolete&rdquo; router, I strongly advocate exploring OpenWrt. It&rsquo;s an excellent opportunity to deepen your understanding of networking, gain unparalleled control over your home internet infrastructure, and champion a more sustainable approach to technology. You might be astounded by the latent capabilities residing within that unassuming plastic enclosure.</p>
]]></content:encoded>
    </item>
    <item>
      <title>My Pocket-Sized Powerhouse: Building an Alpine NAS on a Dell Junk</title>
      <link>https://eeth.pages.dev/blog/my-pocket-sized-powerhouse-building-an-alpine-nas-on-a-dell-junk/</link>
      <pubDate>Mon, 14 Jul 2025 00:00:00 +0000</pubDate><author>jayeshjoshi08jj@gmail.com (hkcfs)</author>
      <guid>https://eeth.pages.dev/blog/my-pocket-sized-powerhouse-building-an-alpine-nas-on-a-dell-junk/</guid>
      <description>&lt;p&gt;People often think you need a powerful, expensive computer to run a good home server or NAS (Network Attached Storage). They imagine big, noisy machines with lots of fast parts. But I&amp;rsquo;m here to share a story about a very old, weak computer that does a great job, showing that you can do a lot with less if you pick the right software.&lt;/p&gt;&#xA;&lt;p&gt;My &amp;ldquo;NAS&amp;rdquo; is actually just an old Dell laptop. It&amp;rsquo;s nothing special: it has an old &lt;strong&gt;Intel J1900 processor&lt;/strong&gt;, which is about as powerful as a Raspberry Pi 3B+. It only has &lt;strong&gt;4GB of RAM&lt;/strong&gt;. And get this: the internal hard drive port broke a long time ago, so I can only use external hard drives connected by USB. Plus, the main internet port stopped working, so I have to use a &lt;strong&gt;USB-to-Ethernet adapter&lt;/strong&gt; for network access.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>People often think you need a powerful, expensive computer to run a good home server or NAS (Network Attached Storage). They imagine big, noisy machines with lots of fast parts. But I&rsquo;m here to share a story about a very old, weak computer that does a great job, showing that you can do a lot with less if you pick the right software.</p>
<p>My &ldquo;NAS&rdquo; is actually just an old Dell laptop. It&rsquo;s nothing special: it has an old <strong>Intel J1900 processor</strong>, which is about as powerful as a Raspberry Pi 3B+. It only has <strong>4GB of RAM</strong>. And get this: the internal hard drive port broke a long time ago, so I can only use external hard drives connected by USB. Plus, the main internet port stopped working, so I have to use a <strong>USB-to-Ethernet adapter</strong> for network access.</p>
<p>Sounds like trash, right? Most people would throw it away. But for me, it&rsquo;s a perfect example of what you can achieve with smart software and a focus on keeping things simple. This isn&rsquo;t just for storing files; it&rsquo;s a full home server running many useful programs, and it uses very little electricity.</p>
<h2 id="the-computer-an-old-but-useful-machine">The Computer: An Old but Useful Machine</h2>
<p>Let&rsquo;s look closer at the computer itself:</p>
<ul>
<li><strong>CPU:</strong> Intel J1900 (4 cores, 4 threads, low speed). This chip was made for basic computers that don&rsquo;t need fans, so it uses very little power. But it&rsquo;s not fast at all for big tasks.</li>
<li><strong>RAM:</strong> 4GB DDR3. This is often the smallest amount of memory people suggest for any server, especially one running container programs like Docker. Managing this memory well is super important.</li>
<li><strong>Storage:</strong> All my storage is on external hard drives connected through USB. This means the speed of moving data is limited by the USB ports, which are not as fast as internal connections like SATA.</li>
<li><strong>Network:</strong> I use a USB-to-Ethernet adapter. This could sometimes cause problems with stability or speed if the adapter or its software isn&rsquo;t good.</li>
</ul>
<p>This laptop wasn&rsquo;t built to be powerful. It was made for simple office work or just browsing the internet. But now, it&rsquo;s the core of my home data system, proving that you don&rsquo;t always need a lot of raw power.</p>
<h2 id="alpine-linux-the-operating-system-for-small-computers">Alpine Linux: The Operating System for Small Computers</h2>
<p>The real trick to making this work is the operating system: <strong>Alpine Linux</strong>. For computers with limited resources, Alpine is the best choice. Here’s why it was perfect for my setup:</p>
<ul>
<li><strong>Very Small Size:</strong> Alpine is incredibly tiny. It uses a different main system library (<code>musl libc</code> instead of <code>glibc</code>), which makes programs very small and keeps the basic system very compact. This means it uses very little disk space and, most importantly, very little RAM.</li>
<li><strong>Security First:</strong> Alpine uses a specially hardened version of the Linux kernel and has strong security features built in. This makes it a very safe base for any server, reducing the ways hackers could get in.</li>
<li><strong>Great for Docker:</strong> Alpine is well-known for working perfectly with Docker. Because it&rsquo;s so small, container images built on Alpine are also tiny, and its package manager (<code>apk</code>) is fast and efficient. This makes it very easy to run containerized applications.</li>
</ul>
<p>Because Alpine is so small, when the laptop is just on and doing nothing, it uses only about <strong>170MB of RAM</strong>. Yes, on a 4GB RAM laptop, less than 200MB is used just for the operating system! This leaves a lot of memory free for the services I want to run.</p>
<h2 id="the-software-stack-docker-and-my-favorite-programs">The Software Stack: Docker and My Favorite Programs</h2>
<p>To run many programs on one machine without them getting in each other&rsquo;s way, I use <strong>Docker</strong>. Docker lets me put each program into its own isolated &ldquo;box&rdquo; called a container. This makes setting them up, updating them, and keeping them separate from the main system much easier.</p>
<p>Here are the important programs running on this small Dell NAS:</p>
<ul>
<li>
<p><strong>Immich (Self-hosted Photo Backup):</strong> This program is like a private version of Google Photos. It backs up all my pictures and videos from my phone and other devices. It has special AI features that can recognize faces, objects, and sort photos automatically.</p>
<ul>
<li><strong>Technical Detail:</strong> Immich&rsquo;s AI features are very demanding. When it&rsquo;s doing a lot of work, like scanning a big batch of new photos, the J1900 CPU goes up to <strong>99-100% usage</strong>. The RAM used by all my services, which is usually around 800MB, can jump to <strong>2.5GB or even 3GB</strong> during these heavy AI tasks. It&rsquo;s not super fast, but it <em>does</em> get the job done in the background. It keeps processing my photos, making them organized and searchable. This shows how good Immich is at using resources and how Docker helps keep big programs from breaking the whole system.</li>
</ul>
</li>
<li>
<p><strong>Kopia (Backup System):</strong> This is my main program for backups. Kopia takes my important files, encrypts them (scrambles them so only I can read them), and stores them efficiently by only saving unique parts of files (<code>deduplication</code>). This saves a lot of disk space. It works perfectly on the external hard drive and also sends copies to my cloud storage for safekeeping.</p>
</li>
<li>
<p><strong>Filebrowser-quantum (Web File Manager):</strong> This is a simple website I can open in my browser to look at and manage files on my external hard drive. It&rsquo;s very light and easy to use, much simpler than setting up a full file-sharing system.</p>
</li>
<li>
<p><strong>Portainer (Docker Control Panel):</strong> This is a website interface that lets me manage all my Docker containers easily. I can start, stop, update, and check on my programs without typing lots of commands. It makes managing everything much more visual and user-friendly.</p>
</li>
<li>
<p><strong>Tailscale (Secure Remote Access):</strong> This program is crucial for connecting to my NAS from anywhere, even when I&rsquo;m not home. Tailscale creates a secure &ldquo;virtual network&rdquo; that connects my devices directly, like a private highway. This means I don&rsquo;t have to deal with complicated router settings (like &ldquo;port forwarding&rdquo;) to get to my files and services securely.</p>
</li>
</ul>
<p>As I mentioned, with <em>all</em> these programs usually running, the total RAM used is around <strong>800MB</strong>. Only when Immich&rsquo;s AI starts its heavy work does the RAM temporarily go higher, sometimes up to 3GB. This shows how well these programs and Alpine Linux manage memory.</p>
<h2 id="power-use-saving-money-on-electricity">Power Use: Saving Money on Electricity</h2>
<p>Besides how well it runs, how much electricity a 24/7 server uses is very important, especially where electricity costs a lot (like in many parts of Europe). The Dell J1900 NAS really shines here:</p>
<ul>
<li><strong>When Idle:</strong> It uses only <strong>8 to 12 watts</strong>. This includes the CPU, main board, RAM, and the external hard drive. This is incredibly low for a computer that&rsquo;s always on.</li>
<li><strong>When Working Hard:</strong> Even when Immich is pushing the CPU to 99-100% doing AI tasks, the total electricity use only goes up to <strong>22 to 25 watts</strong>.</li>
</ul>
<p>This means that even if it runs all day, every day, this NAS costs very little to power. It&rsquo;s a very affordable and environmentally friendly choice compared to bigger, more power-hungry servers or store-bought NAS devices.</p>
<h2 id="what-this-nas-is-not-for-and-why-thats-fine">What This NAS Is NOT For (and Why That&rsquo;s Fine)</h2>
<p>Let&rsquo;s be clear about what this small computer <em>cannot</em> do:</p>
<ul>
<li>It won&rsquo;t let many people watch 4K movies at the same time.</li>
<li>It&rsquo;s not for hosting dozens of busy websites or big databases.</li>
<li>It can&rsquo;t run many virtual machines (like a Windows computer running inside your Linux server).</li>
<li>Immich&rsquo;s AI analysis will be slow, taking hours or days for huge photo libraries, but it finishes the job.</li>
</ul>
<p>But for a personal home NAS, backing up photos, sharing files securely, and running essential private services for a small family or one person, it works amazingly well. It shows that you can get great results with less powerful hardware if you choose the right minimalist operating system and efficient containerized applications.</p>
<h2 id="conclusion-doing-more-with-less">Conclusion: Doing More With Less</h2>
<p>This little Dell laptop, running Alpine Linux with Docker, is more than just a file server. It proves that you don&rsquo;t need to spend a lot of money or use a lot of electricity to have a strong, private, and capable home server.</p>
<p>It feels great to see all these programs running smoothly, knowing they&rsquo;re using only a small part of the computer&rsquo;s limited power. It&rsquo;s about being efficient, thinking about the environment, and taking control of your own data, even with old hardware. If you have an old, &ldquo;weak&rdquo; computer just sitting there, think about giving it a new purpose as a lean, efficient Alpine NAS. You might be very surprised by what it can do, and your wallet (and maybe even the planet) will thank you.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
