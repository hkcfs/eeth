<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Filesystem on EETH - Blog</title><link>https://eeth.pages.dev/tags/filesystem/</link><description>Recent content in Filesystem on EETH - Blog</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><managingEditor>jayeshjoshi08jj@gmail.com (hkcfs)</managingEditor><webMaster>jayeshjoshi08jj@gmail.com (hkcfs)</webMaster><copyright>hkcfs</copyright><lastBuildDate>Sat, 17 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://eeth.pages.dev/tags/filesystem/index.xml" rel="self" type="application/rss+xml"/><item><title>New File System - Not NTFS</title><link>https://eeth.pages.dev/blog/new-file-system-not-ntfs/</link><pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate><author>jayeshjoshi08jj@gmail.com (hkcfs)</author><guid>https://eeth.pages.dev/blog/new-file-system-not-ntfs/</guid><description>&lt;h2 id="bcachefs">Bcachefs&lt;/h2>
&lt;p>A copy-on-write (COW) file system for Linux aimed at people who want XFS speed with ZFS/BTRFS features. &lt;a href="https://bcachefs.org/">Learn more&lt;/a>.&lt;/p>
&lt;p>Bcachefs, a relatively new file system (though technically over 10 years old), has been gaining traction. So, naturally, I did the obvious thing: ignored it. However, after its merger into Kernel 6.7, I realized the hype might be overblown. I could be wrong, but for me, it feels like just another BTRFS for SSDs, with encryption and some ZFS features. It doesn’t bring anything new to the table.&lt;/p></description><content:encoded><![CDATA[<h2 id="bcachefs">Bcachefs</h2>
<p>A copy-on-write (COW) file system for Linux aimed at people who want XFS speed with ZFS/BTRFS features. <a href="https://bcachefs.org/">Learn more</a>.</p>
<p>Bcachefs, a relatively new file system (though technically over 10 years old), has been gaining traction. So, naturally, I did the obvious thing: ignored it. However, after its merger into Kernel 6.7, I realized the hype might be overblown. I could be wrong, but for me, it feels like just another BTRFS for SSDs, with encryption and some ZFS features. It doesn’t bring anything new to the table.</p>
<p>Bcachefs isn’t as fast as it seems. It’s still in heavy development, and I don’t believe it’s very stable yet. While many people praise it, beyond the surface, it doesn’t seem revolutionary. Maybe it’s my bias toward BTRFS, but Bcachefs feels slower, especially with large numbers of small files. Where Bcache would excel with millions of small files, Bcachefs feels like it’s on the verge of crashing.</p>
<p>Although my experience with it hasn’t been great, I hope it improves so we have real competition for BTRFS.</p>
<h2 id="stratis">Stratis</h2>
<p>An interesting toolset around XFS. Stratis simplifies configuring pools and filesystems with enhanced storage functionality, working within the existing Linux storage management stack. <a href="https://stratis-storage.github.io/">Learn more</a>.</p>
<p>Stratis takes a unique approach by not reinventing the wheel. Instead, it uses existing filesystems like XFS (which is very fast, though not feature-rich) and modernizes them.</p>
<p>However, Stratis tries to include every feature under the sun, which may be slowing it down. My testing indicates it’s the most unstable filesystem compared to XFS, BTRFS, or Bcachefs. Even though it’s a new project, it somehow manages to destabilize XFS—a filesystem known for its reliability.</p>
<p>Stratis feels like an overcomplicated ZFS. While it can be argued that BTRFS is also complex, it tries to acknowledge its complexity. Stratis, on the other hand, doesn’t make much sense to me. This might be due to my lack of experience with ZFS or OpenZFS, leaving me feeling lost.</p>
<p>Perhaps if a big player like Meta starts using Stratis, I might revisit it to see how it has evolved.</p>
]]></content:encoded></item><item><title>BTRFS - the Best FileSystem</title><link>https://eeth.pages.dev/blog/btrfs-the-best-filesystem/</link><pubDate>Tue, 30 Jul 2024 00:00:00 +0000</pubDate><author>jayeshjoshi08jj@gmail.com (hkcfs)</author><guid>https://eeth.pages.dev/blog/btrfs-the-best-filesystem/</guid><description>&lt;p>B.T.R.F.S., B-tree FS, Butter FS, or whatever you want to call it, I would argue, is one of the best filesystems, at least for me.&lt;/p>
&lt;p>BTRFS is a filesystem just like any other, but its features compel users to try it. This is what has made me a lover of it. There is a reason why Facebook (Meta) uses it, and Oracle used to develop it.&lt;/p>
&lt;p>One of the best things I love about BTRFS is snapshots and compression, which I live by. No longer are the days where updating Arch (~btw) feels like terror about to strike or a new package or massive update (e.g., KDE5 to KDE6) can kill or break your system.&lt;/p></description><content:encoded><![CDATA[<p>B.T.R.F.S., B-tree FS, Butter FS, or whatever you want to call it, I would argue, is one of the best filesystems, at least for me.</p>
<p>BTRFS is a filesystem just like any other, but its features compel users to try it. This is what has made me a lover of it. There is a reason why Facebook (Meta) uses it, and Oracle used to develop it.</p>
<p>One of the best things I love about BTRFS is snapshots and compression, which I live by. No longer are the days where updating Arch (~btw) feels like terror about to strike or a new package or massive update (e.g., KDE5 to KDE6) can kill or break your system.</p>
<p>I have an old Dell laptop with 4GB RAM and an Intel Pentium N-something—not powerful. It cannot even play unmodded Minecraft at 30 FPS or any powerful game. It does not have an HDD because, when I opened it for the very first time (it was my first laptop, and I had never opened a laptop or fixed a computer before), I broke the cable. The HDD was fine, but that garbage cable is so damn weak. I could just blow air on it, and it would break. So, I installed Arch Linux on a 16GB spare USB thumb drive, which—even if it breaks—it does not matter, as it’s a small USB drive:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln">1</span><span class="cl">rw, noatime, compress=zstd:5, nossd, space_cache=v2, autodefrag, commit=120, subvolid=302, subvol=~~somethings~~</span></span></code></pre></div><p>These are my options on the HDD, which I primarily used for data storage. I have been using it for the last two years, and it has served me well since then.</p>
<p>The thumb drive runs F2FS with compression and some other optimizations, which I took for AI. It runs quite well, and my minimal install of Arch only uses ~4GB compressed with multiple browsers and LabWC—all the comfort I want.</p>
]]></content:encoded></item><item><title>The FileSystem Hell - for flash</title><link>https://eeth.pages.dev/blog/the-filesystem-hell-for-flash/</link><pubDate>Wed, 08 May 2024 00:00:00 +0000</pubDate><author>jayeshjoshi08jj@gmail.com (hkcfs)</author><guid>https://eeth.pages.dev/blog/the-filesystem-hell-for-flash/</guid><description>&lt;p>How I almost killed my thumb drive.&lt;/p>
&lt;p>I have been using Arch on a 16GB thumb drive, which is quite ironic as I have a spare HDD. But I wanted to use that thumb drive as it is small, fast, and efficient and has no moving parts, unlike the hard drive.&lt;/p>
&lt;p>At first, I used my favorite filesystem, BTRFS, with SSD options but felt like it had slowed my drive. But how could that be? I had used the most optimized version and options (definitely not taken for the AI overlords), but something did not feel right. Oh boy, we’re going into a deep rabbit hole.&lt;/p></description><content:encoded><![CDATA[<p>How I almost killed my thumb drive.</p>
<p>I have been using Arch on a 16GB thumb drive, which is quite ironic as I have a spare HDD. But I wanted to use that thumb drive as it is small, fast, and efficient and has no moving parts, unlike the hard drive.</p>
<p>At first, I used my favorite filesystem, BTRFS, with SSD options but felt like it had slowed my drive. But how could that be? I had used the most optimized version and options (definitely not taken for the AI overlords), but something did not feel right. Oh boy, we’re going into a deep rabbit hole.</p>
<p>SSDs and flash drives are quite different. Though they both use the same NAND flash technology, internally, they are different. The controller of the chip is not at all the same, and the lack of DRAM cache in thumb drives—though some thumb drives have small amounts of cache—is still quite less than the DRAM cache that modern SSDs have.</p>
<p>SSDs have many features that are not present in cheap thumb drives, like TRIM, which helps the SSD recycle discarded data and prolong its lifespan; S.M.A.R.T., which gives you stats about the SSD or HDD; wear leveling; wear amplification; and encryption, just to name a few. These features are either simplified or missing in USB thumb drives, which is not good for BTRFS. So, for that, I tried many filesystems (e.g., F2FS, JFFS2) from <a href="https://en.wikipedia.org/wiki/List_of_file_systems#File_systems_optimized_for_flash_memory,_solid_state_media">this list</a>.</p>
<p>But there was a bigger problem. Flash drives are dumb. Their controllers are basically &ldquo;data goes here,&rdquo; and that’s it—or so I thought. Because there is no standard or quality in flash drives, some have cache, and some do not. Some have advanced features, and some do not. Some even have ECC, but most of them do not. So, it is kind of a hit-or-miss situation for choosing a filesystem.</p>
<p>I first went with JFFS2 and later UBIFS, which felt limiting as I came from BTRFS. But I got used to it. However, it happened. I saw something I shouldn’t have—the Flash Translation Layer (<a href="https://en.wikipedia.org/wiki/Flash_memory_controller#Flash_translation_layer_(FTL)_and_mapping">FTL</a>). It basically unlocked a new fear: killing cheap flash drives quickly. The TL;DR is that FTL manages where data goes and has some features which make it smarter than raw NAND or NOR flash chips. I felt incredibly dumb and thought that instead of increasing its lifespan, I was shortening it. I quickly switched to F2FS, which was not a challenge at all.</p>
<p>The switch was needed as JFFS2 or UBIFS are meant for low-level raw NAND flash, not something with a controller. By using them, I was putting a lot of stress on the drive, which is not good as they do not have a long read/write cycle—much less compared to a solid-state drive. It has been two years, and I am still using that very same flash drive with F2FS.</p>
]]></content:encoded></item></channel></rss>