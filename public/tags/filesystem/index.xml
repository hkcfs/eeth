<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Filesystem on EETH - Blog</title>
    <link>https://eeth.pages.dev/tags/filesystem/</link>
    <description>Recent content in Filesystem on EETH - Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <managingEditor>jayeshjoshi08jj@gmail.com (hkcfs)</managingEditor>
    <webMaster>jayeshjoshi08jj@gmail.com (hkcfs)</webMaster>
    <copyright>hkcfs</copyright>
    <lastBuildDate>Sat, 28 Jun 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://eeth.pages.dev/tags/filesystem/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Btrfs vs ZFS Why Btrfs Wins for the Average User</title>
      <link>https://eeth.pages.dev/blog/btrfs-vs-zfs-why-btrfs-wins-for-the-average-user/</link>
      <pubDate>Sat, 28 Jun 2025 00:00:00 +0000</pubDate><author>jayeshjoshi08jj@gmail.com (hkcfs)</author>
      <guid>https://eeth.pages.dev/blog/btrfs-vs-zfs-why-btrfs-wins-for-the-average-user/</guid>
      <description>&lt;p&gt;The world of Linux filesystems is a fascinating place, filled with acronyms and heated debates. For years, the reigning champions for &amp;ldquo;advanced&amp;rdquo; users, beyond the reliable but basic ext4, have been &lt;strong&gt;Btrfs&lt;/strong&gt; and &lt;strong&gt;ZFS&lt;/strong&gt;. Both are modern, copy-on-write (CoW) filesystems packed with features like snapshots, data integrity checks, and built-in RAID capabilities. They are, without a doubt, powerful.&lt;/p&gt;&#xA;&lt;p&gt;But when it comes to the &amp;ldquo;normal&amp;rdquo; person the desktop user, the home lab enthusiast, the one who isn&amp;rsquo;t managing petabytes of mission-critical data in a datacenter one of these stands out as the more practical, user-friendly, and often, simply &lt;em&gt;better&lt;/em&gt; choice. And I&amp;rsquo;d argue that champion is &lt;strong&gt;Btrfs&lt;/strong&gt;.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>The world of Linux filesystems is a fascinating place, filled with acronyms and heated debates. For years, the reigning champions for &ldquo;advanced&rdquo; users, beyond the reliable but basic ext4, have been <strong>Btrfs</strong> and <strong>ZFS</strong>. Both are modern, copy-on-write (CoW) filesystems packed with features like snapshots, data integrity checks, and built-in RAID capabilities. They are, without a doubt, powerful.</p>
<p>But when it comes to the &ldquo;normal&rdquo; person the desktop user, the home lab enthusiast, the one who isn&rsquo;t managing petabytes of mission-critical data in a datacenter one of these stands out as the more practical, user-friendly, and often, simply <em>better</em> choice. And I&rsquo;d argue that champion is <strong>Btrfs</strong>.</p>
<p>Don&rsquo;t get me wrong, ZFS is an absolute beast in the right environment. But for the average user, Btrfs often offers a smoother, less resource intensive, and more integrated experience usually.</p>
<h2 id="the-pitch-why-btrfs-is-your-desktop--home-server-champion">The Pitch: Why Btrfs is Your Desktop &amp; Home Server Champion</h2>
<p>Think of Btrfs as the Swiss Army Knife for your Linux desktop or small home server. It is flexible, feature rich, and, crucially, built right into the Linux kernel itself.</p>
<p>Here&rsquo;s why Btrfs shines for the &ldquo;normal&rdquo; user:</p>
<ul>
<li><strong>Native Linux Kernel Integration:</strong> This is huge. Btrfs is a core part of the Linux kernel. This means it benefits from constant development, testing, and integration with other kernel components. No fussing with out-of-tree modules that might break with a kernel update. It just works, out of the box, with your standard Linux distribution.</li>
<li><strong>Effortless Snapshots:</strong> Btrfs snapshots are incredibly easy to create, manage, and revert. One <code>btrfs subvolume snapshot</code> command, and you have an instant, space-efficient backup of your system or data. This is invaluable for trying new software, risky system updates (especially on rolling release distros like Arch!), or just recovering from an &ldquo;oops&rdquo; moment. Tools like <code>snapper</code> make automated snapshots a breeze.</li>
<li><strong>Transparent Compression:</strong> Btrfs supports transparent data compression (like zstd or zlib). This means your files are automatically compressed as they&rsquo;re written, saving significant disk space, especially for text files, documents, and even some media. For laptops with smaller SSDs or home servers storing lots of archives, this is a massive win. Plus, it can actually <em>improve</em> performance by reducing the amount of data read/written to slower storage.</li>
<li><strong>Flexible Subvolumes:</strong> Btrfs allows you to create logical partitions (subvolumes) within a single filesystem. This is fantastic for organizing your system (e.g. separate <code>/</code>, <code>/home</code>, <code>/var</code> on different subvolumes, all residing on the same physical Btrfs volume), managing snapshots of specific parts, and even installing multiple Linux distributions on the same Btrfs partition.</li>
<li><strong>Built-in RAID (and the simplicity of RAID1):</strong> While ZFS offers more advanced RAID-Z levels, Btrfs includes native RAID0, RAID1, and RAID10. For the home user, the <strong>RAID1 (mirroring)</strong> capability is particularly compelling. It allows you to use multiple drives for redundancy <em>without</em> needing a dedicated hardware RAID controller or complex setup. It&rsquo;s simpler to manage, allows for mixed drive sizes, and can even recover from a single drive failure with relative ease.</li>
</ul>
<h2 id="the-pitch-why-zfs-is-the-enterprise-powerhouse-and-less-for-you">The Pitch: Why ZFS is the Enterprise Powerhouse (and Less for You)</h2>
<p>ZFS is a marvel of engineering. Developed by Sun Microsystems (now Oracle), it&rsquo;s truly an enterprise-grade filesystem. It boasts incredible data integrity, advanced RAID configurations (RAID-Z, RAID-Z2, RAID-Z3), and powerful caching mechanisms.</p>
<p>However, many of ZFS&rsquo;s strengths become complexities or drawbacks for the average desktop or home server user:</p>
<ul>
<li><strong>The Licensing Hurdle (CDDL):</strong> This is the biggest practical issue. ZFS uses the CDDL license, which is incompatible with the Linux kernel&rsquo;s GPL license. This means ZFS cannot be included directly in the mainline Linux kernel. Instead, you have to use out-of-tree kernel modules (like OpenZFS on Linux). While these are generally stable, they require extra compilation, specific versions, and can break with new kernel updates, leading to a much less &ldquo;install and forget&rdquo; experience.</li>
<li><strong>Memory Hungry (ARC Cache):</strong> ZFS is designed for servers with abundant RAM. Its Adaptive Replacement Cache (ARC) is powerful but can consume a significant portion of your system&rsquo;s memory by default. While configurable, this can be a drawback on typical desktop PCs or low-power home servers with 4GB or 8GB of RAM.</li>
<li><strong>Pool-Based Complexity:</strong> ZFS operates on &ldquo;storage pools&rdquo; (zpools) composed of vdevs (virtual devices). While powerful for large, complex storage arrays, this abstraction can be more verbose and less intuitive for managing a single disk or a simple two-disk mirror compared to Btrfs.</li>
<li><strong>Difficult to Shrink:</strong> ZFS pools are notoriously difficult (or impossible) to shrink after creation. While expanding is easy, reducing the size of a pool can require recreating it entirely, which is a major inconvenience for desktop users who might rearrange their storage more frequently.</li>
<li><strong>Deduplication Reality:</strong> ZFS famously offers block-level deduplication. While impressive, it is <em>extremely</em> RAM-intensive and generally impractical for anything but the largest, most specialized server environments. Attempting to use it on a desktop will likely grind your system to a halt.</li>
</ul>
<h2 id="head-to-head-the-normal-user-lens">Head-to-Head: The &ldquo;Normal User&rdquo; Lens</h2>
<p>Let&rsquo;s put them side-by-side from the perspective of an average Linux user:</p>
<table>
  <thead>
      <tr>
          <th>Feature</th>
          <th>Btrfs (Your Champion)</th>
          <th>ZFS (Enterprise Power)</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>Kernel Integration</strong></td>
          <td><strong>Native</strong> - Built into the Linux kernel</td>
          <td><strong>Out-of-tree module</strong> - Requires separate installation/maintenance.</td>
      </tr>
      <tr>
          <td><strong>Installation/Setup</strong></td>
          <td>Simple, often default option during distro install.</td>
          <td>More complex, requires installing <code>zfs-dkms</code> or similar.</td>
      </tr>
      <tr>
          <td><strong>Snapshots</strong></td>
          <td>Easy, flexible, highly user-friendly (<code>snapper</code>).</td>
          <td>Powerful, robust, but sometimes more verbose to manage.</td>
      </tr>
      <tr>
          <td><strong>Compression</strong></td>
          <td><strong>Transparent &amp; Efficient</strong> (<code>zstd</code> is excellent).</td>
          <td>Excellent, but often an afterthought for users.</td>
      </tr>
      <tr>
          <td><strong>RAID Capabilities</strong></td>
          <td>RAID0, RAID1, RAID10. <strong>RAID1 is simple &amp; effective for home use.</strong></td>
          <td>RAID-Z, RAID-Z2, RAID-Z3 (superior for enterprise, more complex).</td>
      </tr>
      <tr>
          <td><strong>Resource Usage</strong></td>
          <td><strong>Generally lighter</strong> on RAM by default.</td>
          <td>Can be <strong>RAM hungry</strong> due to ARC cache.</td>
      </tr>
      <tr>
          <td><strong>Flexibility (Resizing)</strong></td>
          <td>Easier to add/remove devices, can shrink pools (with care).</td>
          <td>Pools are very difficult or impossible to shrink.</td>
      </tr>
      <tr>
          <td><strong>Deduplication</strong></td>
          <td>Not built-in (external tools exist, less integrated).</td>
          <td>Built-in, but <strong>highly impractical</strong> for consumer hardware.</td>
      </tr>
      <tr>
          <td><strong>Data Integrity</strong></td>
          <td>Strong checksumming.</td>
          <td>Extremely robust checksumming and self-healing.</td>
      </tr>
      <tr>
          <td><strong>User Experience</strong></td>
          <td><strong>More &ldquo;Linux native&rdquo; feel</strong>, familiar tooling.</td>
          <td>Feels more like a separate, powerful storage layer.</td>
      </tr>
  </tbody>
</table>
<h2 id="conclusion-choose-the-right-tool-for-your-job">Conclusion: Choose the Right Tool for <em>Your</em> Job</h2>
<blockquote>
<p>&ldquo;The right tool for the job is not always the most powerful, but the one that fits best in your hand.&rdquo;</p></blockquote>
<p>Both Btrfs and ZFS are monumental achievements in filesystem design. ZFS remains the king for enterprise-grade storage, where absolute data integrity, massive scale, and advanced RAID configurations on dedicated server hardware are non-negotiable.</p>
<p>But for the rest of us running Linux on laptops, desktops, or modest home servers <strong>Btrfs offers a superior blend of features, ease of use, and native Linux integration.</strong> Its simple snapshots, transparent compression, and straightforward RAID1 make it incredibly powerful without the headaches associated with ZFS&rsquo;s licensing or resource demands.</p>
<p>If you&rsquo;re looking to upgrade your filesystem experience on Linux, want the benefits of snapshots and data integrity without becoming a storage expert, and appreciate software that just works seamlessly with your kernel, then Btrfs is the clear choice. Give it a try; your data (and your sanity) will thank you.</p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>New File System - Not NTFS</title>
      <link>https://eeth.pages.dev/blog/new-file-system-not-ntfs/</link>
      <pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate><author>jayeshjoshi08jj@gmail.com (hkcfs)</author>
      <guid>https://eeth.pages.dev/blog/new-file-system-not-ntfs/</guid>
      <description>&lt;h2 id=&#34;bcachefs&#34;&gt;Bcachefs&lt;/h2&gt;&#xA;&lt;p&gt;A copy-on-write (COW) file system for Linux aimed at people who want XFS speed with ZFS/BTRFS features. &lt;a href=&#34;https://bcachefs.org/&#34;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Bcachefs, a relatively new file system (though technically over 10 years old), has been gaining traction. So, naturally, I did the obvious thing: ignored it. However, after its merger into Kernel 6.7, I realized the hype might be overblown. I could be wrong, but for me, it feels like just another BTRFS for SSDs, with encryption and some ZFS features. It doesn’t bring anything new to the table.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="bcachefs">Bcachefs</h2>
<p>A copy-on-write (COW) file system for Linux aimed at people who want XFS speed with ZFS/BTRFS features. <a href="https://bcachefs.org/">Learn more</a>.</p>
<p>Bcachefs, a relatively new file system (though technically over 10 years old), has been gaining traction. So, naturally, I did the obvious thing: ignored it. However, after its merger into Kernel 6.7, I realized the hype might be overblown. I could be wrong, but for me, it feels like just another BTRFS for SSDs, with encryption and some ZFS features. It doesn’t bring anything new to the table.</p>
<p>Bcachefs isn’t as fast as it seems. It’s still in heavy development, and I don’t believe it’s very stable yet. While many people praise it, beyond the surface, it doesn’t seem revolutionary. Maybe it’s my bias toward BTRFS, but Bcachefs feels slower, especially with large numbers of small files. Where Bcache would excel with millions of small files, Bcachefs feels like it’s on the verge of crashing.</p>
<p>Although my experience with it hasn’t been great, I hope it improves so we have real competition for BTRFS.</p>
<h2 id="stratis">Stratis</h2>
<p>An interesting toolset around XFS. Stratis simplifies configuring pools and filesystems with enhanced storage functionality, working within the existing Linux storage management stack. <a href="https://stratis-storage.github.io/">Learn more</a>.</p>
<p>Stratis takes a unique approach by not reinventing the wheel. Instead, it uses existing filesystems like XFS (which is very fast, though not feature-rich) and modernizes them.</p>
<p>However, Stratis tries to include every feature under the sun, which may be slowing it down. My testing indicates it’s the most unstable filesystem compared to XFS, BTRFS, or Bcachefs. Even though it’s a new project, it somehow manages to destabilize XFS—a filesystem known for its reliability.</p>
<p>Stratis feels like an overcomplicated ZFS. While it can be argued that BTRFS is also complex, it tries to acknowledge its complexity. Stratis, on the other hand, doesn’t make much sense to me. This might be due to my lack of experience with ZFS or OpenZFS, leaving me feeling lost.</p>
<p>Perhaps if a big player like Meta starts using Stratis, I might revisit it to see how it has evolved.</p>
]]></content:encoded>
    </item>
    <item>
      <title>BTRFS - the Best FileSystem</title>
      <link>https://eeth.pages.dev/blog/btrfs-the-best-filesystem/</link>
      <pubDate>Tue, 30 Jul 2024 00:00:00 +0000</pubDate><author>jayeshjoshi08jj@gmail.com (hkcfs)</author>
      <guid>https://eeth.pages.dev/blog/btrfs-the-best-filesystem/</guid>
      <description>&lt;p&gt;B.T.R.F.S., B-tree FS, Butter FS, or whatever you want to call it, I would argue, is one of the best filesystems, at least for me.&lt;/p&gt;&#xA;&lt;p&gt;BTRFS is a filesystem just like any other, but its features compel users to try it. This is what has made me a lover of it. There is a reason why Facebook (Meta) uses it, and Oracle used to develop it.&lt;/p&gt;&#xA;&lt;p&gt;One of the best things I love about BTRFS is snapshots and compression, which I live by. No longer are the days where updating Arch (~btw) feels like terror about to strike or a new package or massive update (e.g., KDE5 to KDE6) can kill or break your system.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>B.T.R.F.S., B-tree FS, Butter FS, or whatever you want to call it, I would argue, is one of the best filesystems, at least for me.</p>
<p>BTRFS is a filesystem just like any other, but its features compel users to try it. This is what has made me a lover of it. There is a reason why Facebook (Meta) uses it, and Oracle used to develop it.</p>
<p>One of the best things I love about BTRFS is snapshots and compression, which I live by. No longer are the days where updating Arch (~btw) feels like terror about to strike or a new package or massive update (e.g., KDE5 to KDE6) can kill or break your system.</p>
<p>I have an old Dell laptop with 4GB RAM and an Intel Pentium N-something—not powerful. It cannot even play unmodded Minecraft at 30 FPS or any powerful game. It does not have an HDD because, when I opened it for the very first time (it was my first laptop, and I had never opened a laptop or fixed a computer before), I broke the cable. The HDD was fine, but that garbage cable is so damn weak. I could just blow air on it, and it would break. So, I installed Arch Linux on a 16GB spare USB thumb drive, which—even if it breaks—it does not matter, as it’s a small USB drive:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln">1</span><span class="cl">rw, noatime, compress=zstd:5, nossd, space_cache=v2, autodefrag, commit=120, subvolid=302, subvol=~~somethings~~</span></span></code></pre></div><p>These are my options on the HDD, which I primarily used for data storage. I have been using it for the last two years, and it has served me well since then.</p>
<p>The thumb drive runs F2FS with compression and some other optimizations, which I took for AI. It runs quite well, and my minimal install of Arch only uses ~4GB compressed with multiple browsers and LabWC—all the comfort I want.</p>
]]></content:encoded>
    </item>
    <item>
      <title>The FileSystem Hell - for flash</title>
      <link>https://eeth.pages.dev/blog/the-filesystem-hell-for-flash/</link>
      <pubDate>Wed, 08 May 2024 00:00:00 +0000</pubDate><author>jayeshjoshi08jj@gmail.com (hkcfs)</author>
      <guid>https://eeth.pages.dev/blog/the-filesystem-hell-for-flash/</guid>
      <description>&lt;p&gt;How I almost killed my thumb drive.&lt;/p&gt;&#xA;&lt;p&gt;I have been using Arch on a 16GB thumb drive, which is quite ironic as I have a spare HDD. But I wanted to use that thumb drive as it is small, fast, and efficient and has no moving parts, unlike the hard drive.&lt;/p&gt;&#xA;&lt;p&gt;At first, I used my favorite filesystem, BTRFS, with SSD options but felt like it had slowed my drive. But how could that be? I had used the most optimized version and options (definitely not taken for the AI overlords), but something did not feel right. Oh boy, we’re going into a deep rabbit hole.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>How I almost killed my thumb drive.</p>
<p>I have been using Arch on a 16GB thumb drive, which is quite ironic as I have a spare HDD. But I wanted to use that thumb drive as it is small, fast, and efficient and has no moving parts, unlike the hard drive.</p>
<p>At first, I used my favorite filesystem, BTRFS, with SSD options but felt like it had slowed my drive. But how could that be? I had used the most optimized version and options (definitely not taken for the AI overlords), but something did not feel right. Oh boy, we’re going into a deep rabbit hole.</p>
<p>SSDs and flash drives are quite different. Though they both use the same NAND flash technology, internally, they are different. The controller of the chip is not at all the same, and the lack of DRAM cache in thumb drives—though some thumb drives have small amounts of cache—is still quite less than the DRAM cache that modern SSDs have.</p>
<p>SSDs have many features that are not present in cheap thumb drives, like TRIM, which helps the SSD recycle discarded data and prolong its lifespan; S.M.A.R.T., which gives you stats about the SSD or HDD; wear leveling; wear amplification; and encryption, just to name a few. These features are either simplified or missing in USB thumb drives, which is not good for BTRFS. So, for that, I tried many filesystems (e.g., F2FS, JFFS2) from <a href="https://en.wikipedia.org/wiki/List_of_file_systems#File_systems_optimized_for_flash_memory,_solid_state_media">this list</a>.</p>
<p>But there was a bigger problem. Flash drives are dumb. Their controllers are basically &ldquo;data goes here,&rdquo; and that’s it—or so I thought. Because there is no standard or quality in flash drives, some have cache, and some do not. Some have advanced features, and some do not. Some even have ECC, but most of them do not. So, it is kind of a hit-or-miss situation for choosing a filesystem.</p>
<p>I first went with JFFS2 and later UBIFS, which felt limiting as I came from BTRFS. But I got used to it. However, it happened. I saw something I shouldn’t have—the Flash Translation Layer (<a href="https://en.wikipedia.org/wiki/Flash_memory_controller#Flash_translation_layer_%28FTL%29_and_mapping">FTL</a>). It basically unlocked a new fear: killing cheap flash drives quickly. The TL;DR is that FTL manages where data goes and has some features which make it smarter than raw NAND or NOR flash chips. I felt incredibly dumb and thought that instead of increasing its lifespan, I was shortening it. I quickly switched to F2FS, which was not a challenge at all.</p>
<p>The switch was needed as JFFS2 or UBIFS are meant for low-level raw NAND flash, not something with a controller. By using them, I was putting a lot of stress on the drive, which is not good as they do not have a long read/write cycle—much less compared to a solid-state drive. It has been two years, and I am still using that very same flash drive with F2FS.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
