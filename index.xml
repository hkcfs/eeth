<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>EETH - Blog</title><link>http://localhost:1313/</link><description>Recent content on EETH - Blog</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><managingEditor>jayeshjoshi08jj@gmail.com (hkcfs)</managingEditor><webMaster>jayeshjoshi08jj@gmail.com (hkcfs)</webMaster><copyright>hkcfs</copyright><lastBuildDate>Tue, 03 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml"/><item><title>Android Phones Are Good Again</title><link>http://localhost:1313/blog/android-phones-are-good-again/</link><pubDate>Tue, 03 Dec 2024 00:00:00 +0000</pubDate><author>jayeshjoshi08jj@gmail.com (hkcfs)</author><guid>http://localhost:1313/blog/android-phones-are-good-again/</guid><description>&lt;p>Recently, I came across &lt;a href="https://github.com/bkerler/mtkclient">MTKCLIENT&lt;/a>, a fascinating reverse engineering project that aims to hack MediaTek SOCs at a low level. It provides direct access to a device&amp;rsquo;s memory, enabling you to edit partitions, memory, and other critical aspects of the device. The project uses clever exploits within the SOC itself to achieve this.&lt;/p>
&lt;p>MTKCLIENT works perfectly with older MediaTek processors, but when it comes to newer chips (like the 70, 80, and 90 series), it starts to struggle. These newer chips use a completely new protocol called &lt;strong>v6&lt;/strong>, which is still less understood and developed compared to the older &lt;strong>v5&lt;/strong> protocol.&lt;/p></description><content:encoded><![CDATA[<p>Recently, I came across <a href="https://github.com/bkerler/mtkclient">MTKCLIENT</a>, a fascinating reverse engineering project that aims to hack MediaTek SOCs at a low level. It provides direct access to a device&rsquo;s memory, enabling you to edit partitions, memory, and other critical aspects of the device. The project uses clever exploits within the SOC itself to achieve this.</p>
<p>MTKCLIENT works perfectly with older MediaTek processors, but when it comes to newer chips (like the 70, 80, and 90 series), it starts to struggle. These newer chips use a completely new protocol called <strong>v6</strong>, which is still less understood and developed compared to the older <strong>v5</strong> protocol.</p>
<h2 id="why-you-may-ask">Why, you may ask?</h2>
<p>Well, here&rsquo;s the thing: phone manufacturers have decided that letting users install whatever OS they want isn’t <strong>“safe”</strong> anymore. They’ll try to tell you it&rsquo;s for your own protection, especially when it comes to kids or whatever other reasons they come up with to make you believe that restricting your options is the right call.</p>
<p>It wasn’t that long ago—7 or 8 years, maybe—that you could buy any phone, set it up, and unlock the bootloader in 0 days of the purchasing it, take that you with your 7 days restriction. Fast forward to today, and try doing that with a Samsung. Good luck. Unlocking the bootloader on most modern phones is a pain, and with some brands, it’s just flat-out impossible. This whole situation is what led me to discover MTKClient, which is honestly an awesome tool.</p>
<p>Until phone makers fix this problem and let users have more control, I’ll stick to devices that make it easy to unlock the bootloader.</p>
<h2 id="whats-the-deal-with-v6">What&rsquo;s the Deal with V6?</h2>
<p>The latest MediaTek processors (such as the 70, 80, and 90 series) have introduced the <strong>v6</strong> protocol, which makes things trickier for those trying to modify the system. Unlike older chips, you can’t just flash these devices in the usual way. The <strong>bootrom</strong> (the code that runs during device startup) is <strong>patched</strong>, so you need to use a special <strong>DA (Download Agent)</strong> file and load it via the <code>--loader</code> option. This is essential if you&rsquo;re aiming to modify anything on these newer devices.</p>
<p>In some cases, the <strong>preloader</strong> (the software responsible for booting the device) might be disabled. However, you can work around this by using the <strong>ADB reboot edl</strong> command, which forces the device into <strong>Emergency Download Mode (EDL)</strong>, allowing you to flash or fix the device.</p>
<p>Not all devices are created equally. If your device is <strong>UNFUSED</strong>, you&rsquo;re in luck, as there are no hardware security locks in place. However, if your device has extra security features like <strong>DAA</strong> (Device Authentication Algorithm), <strong>SLA</strong> (Secure Loader Authentication), or <strong>Remote-Auth</strong> (Remote Authentication), things get significantly more complicated. These protocols make it much harder to modify the firmware without specialized tools or knowledge.</p>
<p>Currently, there&rsquo;s no public method to bypass these security measures for devices with DAA, SLA, or Remote-Auth enabled. If you have one of these devices, you&rsquo;re pretty much stuck unless you have access to advanced tools or some obscure communication methods. <a href="https://t.me/">Telegram</a> you might have never heard it, yeah. telegram is the holy grale of all custom rom bootloader unlock adn what not <code>say goodbye</code> to <strong>XDA form</strong> and <code>say Hello</code> to Telegram.</p>
<p>For the <strong>typical</strong> user, the MTK GUI should suffice, but when dealing with v6, the command-line (CLI) is your only option.</p>
<h2 id="using-the-mtkclient-v5-devices">Using the MTKCLIENT (v5 devices)</h2>
<h3 id="requirements">Requirements</h3>
<ol>
<li><strong>A MediaTek device with an unlocked bootloader</strong> (or one that supports bootloader unlocking).</li>
<li><strong>MTKClient tool</strong> installed on your system.</li>
<li><strong>USB Debugging</strong> enabled on the device.</li>
<li><strong>OEM Unlocking</strong> enabled in Developer Options.</li>
</ol>
<h3 id="step-by-step-guide-to-unlocking-the-bootloader">Step-by-Step Guide to Unlocking the Bootloader</h3>
<h4 id="1-install-mtkclient">1. <strong>Install MTKClient</strong></h4>
<ul>
<li>
<p>First, clone the MTKClient repository:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">git clone https://github.com/bkerler/mtkclient
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nb">cd</span> mtkclient
</span></span><span class="line"><span class="ln">3</span><span class="cl">pip3 install -r requirements.txt
</span></span><span class="line"><span class="ln">4</span><span class="cl">pip3 install .</span></span></code></pre></div></li>
<li>
<p>On Linux, ensure that your user is added to the <code>plugdev</code> and <code>dialout</code> groups:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo usermod -a -G plugdev <span class="nv">$USER</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">sudo usermod -a -G dialout <span class="nv">$USER</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">sudo cp mtkclient/Setup/Linux/*.rules /etc/udev/rules.d
</span></span><span class="line"><span class="ln">4</span><span class="cl">sudo udevadm control -R
</span></span><span class="line"><span class="ln">5</span><span class="cl">sudo udevadm trigger</span></span></code></pre></div></li>
<li>
<p>On Windows, make sure <strong>UsbDk</strong> and the appropriate <strong>MTK USB drivers</strong> are installed.</p>
</li>
</ul>
<hr>
<h4 id="2-boot-your-device-into-brom-mode">2. <strong>Boot Your Device into BROM Mode</strong></h4>
<p>To interact with the device at a low level, you must boot it into <strong>BROM (Boot ROM) mode</strong>:</p>
<ul>
<li><strong>For most devices</strong>: Power off the device, then press and hold <strong>Volume Up + Power</strong> or <strong>Volume Down + Power</strong> while connecting it to your computer.</li>
<li>Once in BROM mode, <strong>release the buttons</strong>. MTKClient should now detect the device.</li>
</ul>
<hr>
<h4 id="3-unlock-the-bootloader">3. <strong>Unlock the Bootloader</strong></h4>
<p>To unlock the bootloader, you need to erase specific partitions and adjust security configurations:</p>
<ol>
<li>
<p><strong>Erase Metadata and User Data</strong>:</p>
<ul>
<li>Unlocking the bootloader may require erasing critical partitions like metadata and user data. Run the following commands:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">python mtk.py e metadata,userdata</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p><strong>Unlock the Bootloader</strong>:</p>
<ul>
<li>To unlock the bootloader, execute:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">python mtk.py da seccfg unlock</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p><strong>Reboot the Device</strong>:</p>
<ul>
<li>Finally, reboot your device to apply the changes:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">python mtk.py reset</span></span></code></pre></div></li>
</ul>
</li>
</ol>
<hr>
<p>And like magic you the bootloader is unlock no need to wait for manufacture to give you a code (motorola) or wait weeks to unlock the device no one would do that, Right.</p>
<h2 id="reading-the-entire-storage"><strong>Reading the Entire Storage</strong></h2>
<p>Once the bootloader is unlocked, you can begin reading the device&rsquo;s storage, including partitions and full flash dumps.</p>
<ol>
<li>
<p><strong>Read Boot Partition</strong>:</p>
<ul>
<li>Dump the boot partition with:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">python mtk.py r boot boot.bin</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p><strong>Read Preloader Partition</strong> (if needed):</p>
<ul>
<li>If you need to dump the preloader, use:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">python mtk.py r preloader preloader.bin --parttype<span class="o">=</span>boot1</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p><strong>Dump Entire Flash</strong>:</p>
<ul>
<li>To dump the entire flash memory (including all partitions), run:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">python mtk.py rf flash.bin</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p><strong>Read Specific Flash Offsets</strong>:</p>
<ul>
<li>To read specific offsets, use:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">python mtk.py ro 0x128000 0x200000 flash.bin</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p><strong>Read All Partitions</strong>:</p>
<ul>
<li>To dump all partitions into a folder, use:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">python mtk.py rl out</span></span></code></pre></div></li>
</ul>
</li>
</ol>
<hr>
<h2 id="working-with-file-systems"><strong>Working with File Systems</strong></h2>
<p>MTKClient also allows you to mount the device&rsquo;s flash memory as a file system and interact with it directly.</p>
<ol>
<li>
<p><strong>Mount Flash as a File System</strong>:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">python mtk.py fs /mnt/mtk</span></span></code></pre></div></li>
<li>
<p><strong>Browse or Modify Files</strong>:</p>
<ul>
<li>Once mounted, you can browse directories, read files, or even modify them directly on the device.</li>
</ul>
</li>
</ol>
<p>These are just a few of the things you can do with MTKClient. If you have the right skillset and knowledge, you might even be able to design your own custom payload.</p>
]]></content:encoded></item><item><title>Free Cloud Storage - Legal?</title><link>http://localhost:1313/blog/free-cloud-storage-legal/</link><pubDate>Fri, 06 Sep 2024 00:00:00 +0000</pubDate><author>jayeshjoshi08jj@gmail.com (hkcfs)</author><guid>http://localhost:1313/blog/free-cloud-storage-legal/</guid><description>&lt;p>This is not an article about how to get free storage in the traditional sense but rather how to obtain semi-unlimited storage. Don’t think I’m about to talk about &lt;a href="https://www.blomp.com/">Blomp&lt;/a> or &lt;a href="https://www.1024terabox.com/">Terabox&lt;/a> or anything of that sort.&lt;/p>
&lt;h2 id="the-problem-with-free-storage">The Problem with Free Storage&lt;/h2>
&lt;p>Who doesn’t want free storage? But entrusting your data to servers in unknown locations with no clear understanding of how your data is stored, all while being bombarded with ads, is a risky choice.&lt;/p></description><content:encoded><![CDATA[<p>This is not an article about how to get free storage in the traditional sense but rather how to obtain semi-unlimited storage. Don’t think I’m about to talk about <a href="https://www.blomp.com/">Blomp</a> or <a href="https://www.1024terabox.com/">Terabox</a> or anything of that sort.</p>
<h2 id="the-problem-with-free-storage">The Problem with Free Storage</h2>
<p>Who doesn’t want free storage? But entrusting your data to servers in unknown locations with no clear understanding of how your data is stored, all while being bombarded with ads, is a risky choice.</p>
<p>Here’s the truth: these providers have no incentive to keep your data safe or even intact—it’s <em>free</em>, after all. One day, you might log in only to find your data gone or, worse, your entire account deleted.</p>
<h3 id="a-safer-approach">A Safer Approach</h3>
<p>If your data is critical, store it locally or pay for cloud storage. It’s one of the best options available. However, if you’re looking for free, reliable, and privacy-conscious storage, consider options like:</p>
<ul>
<li><a href="https://www.pcloud.com/">pCloud</a></li>
<li><a href="https://mega.nz/">Mega</a></li>
</ul>
<p>Yes, these platforms have their own controversies, but they’re still a better choice than unknown companies. Beware of providers that can change their Terms of Service whenever they wish—one day, they might decide to train AI models on your data without your consent.</p>
<p>If your data isn’t sensitive, you can take the risk with free providers. However, for critical files, encrypt them first using tools like:</p>
<ul>
<li><a href="https://cryptomator.org/">Cryptomator</a></li>
<li><a href="https://www.borgbackup.org/">Borg</a></li>
<li><a href="https://kopia.io/">Kopia</a></li>
</ul>
<p>These are complete backup solutions that include robust encryption. Personally, I’ve been using <strong>Kopia</strong> as my primary backup tool for a long time, and it has never let me down.</p>
<h2 id="enter-rclone-the-game-changer">Enter Rclone: The Game-Changer</h2>
<p><a href="https://rclone.org/">Rclone</a> is a powerful tool for syncing files between cloud and local storage. One of its standout features is <strong>union</strong>, which allows you to merge multiple cloud accounts into one unified storage pool. This feature can effectively give you semi-unlimited storage by combining the free storage offered by multiple providers.</p>
<hr>
<h3 id="rclone-union-diagram">Rclone Union Diagram</h3>
<p>Here’s a simplified diagram explaining how Rclone’s <strong>union</strong> works:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="ln"> 1</span><span class="cl">    +-------------------+
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    |    Cloud A (50GB) |
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    +-------------------+
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">               |
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">               v
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    +-------------------+
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    |    Cloud B (30GB) |
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    +-------------------+
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">               |
</span></span><span class="line"><span class="ln">10</span><span class="cl">               v
</span></span><span class="line"><span class="ln">11</span><span class="cl">    +-------------------+
</span></span><span class="line"><span class="ln">12</span><span class="cl">    | Combined Storage  |
</span></span><span class="line"><span class="ln">13</span><span class="cl">    |      (80GB)       |
</span></span><span class="line"><span class="ln">14</span><span class="cl">    +-------------------+</span></span></code></pre></div><p>Rclone treats the individual accounts (Cloud A and Cloud B) as parts of a single, larger storage unit. This seamless integration makes it possible to manage multiple accounts as if they were one.</p>
<hr>
<h3 id="setting-up-rclone-union">Setting Up Rclone Union</h3>
<p>Here’s an example of how to set up <strong>union</strong> with two cloud providers:</p>
<ol>
<li><strong>Install Rclone</strong>: Follow the <a href="https://rclone.org/install/">installation guide</a>.</li>
<li><strong>Configure Individual Remotes</strong>: Use <code>rclone config</code> to set up connections to your cloud providers (e.g., Google Drive and Dropbox).</li>
<li><strong>Create a Union Remote</strong>: Add a new remote in your Rclone config file for the union. Example setup:</li>
</ol>





<pre tabindex="0"><code class="language-config" data-lang="config">[merged]
type = union
upstreams = gdrive: dropbox:
search_policy = ff
min_free_space = 100Mi
description = Combined cloud storage
action_policy = eplfs
create_policy = epmfs</code></pre><hr>
<h3 id="explaining-the-config-snippet">Explaining the Config Snippet</h3>
<ul>
<li><strong>[merged]</strong>: The name of the union remote.</li>
<li><strong>upstreams</strong>: The individual remotes being combined. Replace <code>gdrive:</code> and <code>dropbox:</code> with your actual remote names.</li>
<li><strong>search_policy</strong>: Defines how Rclone searches for files, using the <em>first found</em> policy there are other&rsquo;s avliable too.</li>
<li><strong>min_free_space</strong>: Ensures there’s at least 100 MiB free across the union before new files are uploaded.</li>
<li><strong>action_policy</strong> &amp; <strong>create_policy</strong>: Decide where actions (like deleting or creating files) occur, prioritizing paths based on available space or existing files others are avliable too but, i can&rsquo;t understat it soo.</li>
</ul>
<hr>
<h3 id="final-thoughts">Final Thoughts</h3>
<p>Using Rclone’s <strong>union</strong> feature, I’ve successfully merged two cloud accounts into an 80GB virtual storage pool. This is a fantastic way to maximize free cloud storage if you’re willing to put in a bit of effort.</p>
<p>Remember, always encrypt sensitive files before uploading them to any cloud storage service. Tools like Rclone combined with encryption solutions can make free storage both effective and secure.</p>
]]></content:encoded></item><item><title>New File System - Not NTFS</title><link>http://localhost:1313/blog/new-file-system-not-ntfs/</link><pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate><author>jayeshjoshi08jj@gmail.com (hkcfs)</author><guid>http://localhost:1313/blog/new-file-system-not-ntfs/</guid><description>&lt;h2 id="bcachefs">Bcachefs&lt;/h2>
&lt;p>A copy-on-write (COW) file system for Linux aimed at people who want XFS speed with ZFS/BTRFS features. &lt;a href="https://bcachefs.org/">Learn more&lt;/a>.&lt;/p>
&lt;p>Bcachefs, a relatively new file system (though technically over 10 years old), has been gaining traction. So, naturally, I did the obvious thing: ignored it. However, after its merger into Kernel 6.7, I realized the hype might be overblown. I could be wrong, but for me, it feels like just another BTRFS for SSDs, with encryption and some ZFS features. It doesn’t bring anything new to the table.&lt;/p></description><content:encoded><![CDATA[<h2 id="bcachefs">Bcachefs</h2>
<p>A copy-on-write (COW) file system for Linux aimed at people who want XFS speed with ZFS/BTRFS features. <a href="https://bcachefs.org/">Learn more</a>.</p>
<p>Bcachefs, a relatively new file system (though technically over 10 years old), has been gaining traction. So, naturally, I did the obvious thing: ignored it. However, after its merger into Kernel 6.7, I realized the hype might be overblown. I could be wrong, but for me, it feels like just another BTRFS for SSDs, with encryption and some ZFS features. It doesn’t bring anything new to the table.</p>
<p>Bcachefs isn’t as fast as it seems. It’s still in heavy development, and I don’t believe it’s very stable yet. While many people praise it, beyond the surface, it doesn’t seem revolutionary. Maybe it’s my bias toward BTRFS, but Bcachefs feels slower, especially with large numbers of small files. Where Bcache would excel with millions of small files, Bcachefs feels like it’s on the verge of crashing.</p>
<p>Although my experience with it hasn’t been great, I hope it improves so we have real competition for BTRFS.</p>
<h2 id="stratis">Stratis</h2>
<p>An interesting toolset around XFS. Stratis simplifies configuring pools and filesystems with enhanced storage functionality, working within the existing Linux storage management stack. <a href="https://stratis-storage.github.io/">Learn more</a>.</p>
<p>Stratis takes a unique approach by not reinventing the wheel. Instead, it uses existing filesystems like XFS (which is very fast, though not feature-rich) and modernizes them.</p>
<p>However, Stratis tries to include every feature under the sun, which may be slowing it down. My testing indicates it’s the most unstable filesystem compared to XFS, BTRFS, or Bcachefs. Even though it’s a new project, it somehow manages to destabilize XFS—a filesystem known for its reliability.</p>
<p>Stratis feels like an overcomplicated ZFS. While it can be argued that BTRFS is also complex, it tries to acknowledge its complexity. Stratis, on the other hand, doesn’t make much sense to me. This might be due to my lack of experience with ZFS or OpenZFS, leaving me feeling lost.</p>
<p>Perhaps if a big player like Meta starts using Stratis, I might revisit it to see how it has evolved.</p>
]]></content:encoded></item><item><title>BTRFS - the Best FileSystem</title><link>http://localhost:1313/blog/btrfs-the-best-filesystem/</link><pubDate>Tue, 30 Jul 2024 00:00:00 +0000</pubDate><author>jayeshjoshi08jj@gmail.com (hkcfs)</author><guid>http://localhost:1313/blog/btrfs-the-best-filesystem/</guid><description>&lt;p>B.T.R.F.S., B-tree FS, Butter FS, or whatever you want to call it, I would argue, is one of the best filesystems, at least for me.&lt;/p>
&lt;p>BTRFS is a filesystem just like any other, but its features compel users to try it. This is what has made me a lover of it. There is a reason why Facebook (Meta) uses it, and Oracle used to develop it.&lt;/p>
&lt;p>One of the best things I love about BTRFS is snapshots and compression, which I live by. No longer are the days where updating Arch (~btw) feels like terror about to strike or a new package or massive update (e.g., KDE5 to KDE6) can kill or break your system.&lt;/p></description><content:encoded><![CDATA[<p>B.T.R.F.S., B-tree FS, Butter FS, or whatever you want to call it, I would argue, is one of the best filesystems, at least for me.</p>
<p>BTRFS is a filesystem just like any other, but its features compel users to try it. This is what has made me a lover of it. There is a reason why Facebook (Meta) uses it, and Oracle used to develop it.</p>
<p>One of the best things I love about BTRFS is snapshots and compression, which I live by. No longer are the days where updating Arch (~btw) feels like terror about to strike or a new package or massive update (e.g., KDE5 to KDE6) can kill or break your system.</p>
<p>I have an old Dell laptop with 4GB RAM and an Intel Pentium N-something—not powerful. It cannot even play unmodded Minecraft at 30 FPS or any powerful game. It does not have an HDD because, when I opened it for the very first time (it was my first laptop, and I had never opened a laptop or fixed a computer before), I broke the cable. The HDD was fine, but that garbage cable is so damn weak. I could just blow air on it, and it would break. So, I installed Arch Linux on a 16GB spare USB thumb drive, which—even if it breaks—it does not matter, as it’s a small USB drive:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln">1</span><span class="cl">rw, noatime, compress=zstd:5, nossd, space_cache=v2, autodefrag, commit=120, subvolid=302, subvol=~~somethings~~</span></span></code></pre></div><p>These are my options on the HDD, which I primarily used for data storage. I have been using it for the last two years, and it has served me well since then.</p>
<p>The thumb drive runs F2FS with compression and some other optimizations, which I took for AI. It runs quite well, and my minimal install of Arch only uses ~4GB compressed with multiple browsers and LabWC—all the comfort I want.</p>
]]></content:encoded></item><item><title>Backups - we all have them right ?</title><link>http://localhost:1313/blog/backups-we-all-have-them-right/</link><pubDate>Wed, 24 Jul 2024 00:00:00 +0000</pubDate><author>jayeshjoshi08jj@gmail.com (hkcfs)</author><guid>http://localhost:1313/blog/backups-we-all-have-them-right/</guid><description>&lt;p>Backups - we all have them, right?&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;A backup isn’t just about saving data; it’s about saving yourself from the regret of losing what matters most.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>Well, backups are the bane of my existence. No, really. I have multiple backups of all my data. I try to follow the 3-2-1 backup plan, which means:&lt;/p>
&lt;ul>
&lt;li>3 Copies of Data&lt;/li>
&lt;li>2 Different Media&lt;/li>
&lt;li>1 Copy Offsite
&lt;a href="https://www.backblaze.com/blog/the-3-2-1-backup-strategy">Learn more&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>This is what I generally like to do, but most of my data pre-COVID was scattered across multiple HDDs with no plan for where the data was stored and no automation.&lt;/p></description><content:encoded><![CDATA[<p>Backups - we all have them, right?</p>
<blockquote>
<p>&ldquo;A backup isn’t just about saving data; it’s about saving yourself from the regret of losing what matters most.&rdquo;</p>
</blockquote>
<p>Well, backups are the bane of my existence. No, really. I have multiple backups of all my data. I try to follow the 3-2-1 backup plan, which means:</p>
<ul>
<li>3 Copies of Data</li>
<li>2 Different Media</li>
<li>1 Copy Offsite
<a href="https://www.backblaze.com/blog/the-3-2-1-backup-strategy">Learn more</a>.</li>
</ul>
<p>This is what I generally like to do, but most of my data pre-COVID was scattered across multiple HDDs with no plan for where the data was stored and no automation.</p>
<p>Things have changed, and now I have a proper backup plan and offsite backup with Mega Cloud. Many might not like Mega Cloud because of its controversial history, especially involving its creator, <a href="https://en.wikipedia.org/wiki/Kim_Dotcom">Kim Dotcom</a>. However, I feel it’s a good platform with security in mind. That said, it doesn’t have a great history, so I still encrypt everything locally on a Linux box before sending the data to any cloud, as <strong>the cloud is just someone else’s computer</strong>. Always believe that anyone can view or modify that data. If you’re on a free plan like me, keep redundancy in mind. Losing a &ldquo;free&rdquo; account with all your data is not something any cloud service provider will care about. So, go for the cheapest plan if you want to.</p>
<p>If you want to go free, do so with caution, and always keep in mind that data can be lost at any time. Always keep a local backup or something that might help you when disaster strikes.</p>
<p>Backups are a very personal thing. Many of us have very different requirements, and there is no one great tool or solution for all. Experimentation is very much encouraged. But just have a backup—it’s much better than being among the 50% of people who have no backup.</p>
<p>For example, YouTubers might have a lot of videos and images, so they might need multiple TBs of storage. But someone like me, who has some images, videos, a simple blog, and configuration files, might only need around 50GB. My current backup is ~67GB, including images, videos, configuration files, and important documents. I use Mega and have been for a long time. Mega only gives you 20GB free now, but when I created my account, it gave me 50GB, which is now very much filled with less than 2GB free.</p>
<p>I suggest that anyone about to back up seriously should first check their needs. Can it just be handled with a free account, or do you need more, like a subscription? I would say if you have less than 150GB, then the free tier would be enough, though above 100GB, it would be a stretch. But if you have more than that, then a paid solution would suit you well. No matter what, if you do not have a backup, then do it now. Even just having a copy on an external drive is better than no backup. Take action now—your future self will thank you.</p>
]]></content:encoded></item><item><title>Arch Linux - BTW</title><link>http://localhost:1313/blog/arch-linux-btw/</link><pubDate>Sun, 21 Jul 2024 00:00:00 +0000</pubDate><author>jayeshjoshi08jj@gmail.com (hkcfs)</author><guid>http://localhost:1313/blog/arch-linux-btw/</guid><description>&lt;blockquote>
&lt;p>&amp;ldquo;I have been using Arch Linux for the longest time, and it has been a great system—or at least, that’s what I would say in a perfect world.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>Arch Linux is like LFS (Linux From Scratch) but simpler. Since the introduction of &lt;code>archinstall&lt;/code>, it has become more&amp;hellip; let’s just say &amp;ldquo;dumber,&amp;rdquo; though it’s still quite a good system.&lt;/p>
&lt;p>If you want to learn about a Linux system but don’t want to waste 60+ hours of your life on Gentoo before binaries, it’s quite a good distro. However, I wouldn’t recommend using the &lt;code>archinstall&lt;/code> system. What’s the point if you do? I’d only recommend Arch if you know what you’re doing or if you’ve manually installed it at least twice with custom settings, like using BTRFS, custom repositories, or even Artix instead of Arch.&lt;/p></description><content:encoded><![CDATA[<blockquote>
<p>&ldquo;I have been using Arch Linux for the longest time, and it has been a great system—or at least, that’s what I would say in a perfect world.&rdquo;</p>
</blockquote>
<p>Arch Linux is like LFS (Linux From Scratch) but simpler. Since the introduction of <code>archinstall</code>, it has become more&hellip; let’s just say &ldquo;dumber,&rdquo; though it’s still quite a good system.</p>
<p>If you want to learn about a Linux system but don’t want to waste 60+ hours of your life on Gentoo before binaries, it’s quite a good distro. However, I wouldn’t recommend using the <code>archinstall</code> system. What’s the point if you do? I’d only recommend Arch if you know what you’re doing or if you’ve manually installed it at least twice with custom settings, like using BTRFS, custom repositories, or even Artix instead of Arch.</p>
<p>Arch is a rolling release, which means it doesn’t have defined versions like most software. It just keeps updating—and will do so as long as it’s maintained.</p>
<p>That said, it comes with its own set of challenges. If you want to do something unique, like running Linux from Google Drive (<a href="https://ersei.net/en/blog/fuse-root">source</a>), Arch Linux can handle it. Though, I would argue Alpine Linux is better for such cases.</p>
<p>All in all, Arch is a flexible, minimal, and community-driven Linux distro. People love it, and so do I. It has its challenges, but there’s a reason why I keep switching back to it.</p>
]]></content:encoded></item><item><title>The FileSystem Hell - for flash</title><link>http://localhost:1313/blog/the-filesystem-hell-for-flash/</link><pubDate>Wed, 08 May 2024 00:00:00 +0000</pubDate><author>jayeshjoshi08jj@gmail.com (hkcfs)</author><guid>http://localhost:1313/blog/the-filesystem-hell-for-flash/</guid><description>&lt;p>How I almost killed my thumb drive.&lt;/p>
&lt;p>I have been using Arch on a 16GB thumb drive, which is quite ironic as I have a spare HDD. But I wanted to use that thumb drive as it is small, fast, and efficient and has no moving parts, unlike the hard drive.&lt;/p>
&lt;p>At first, I used my favorite filesystem, BTRFS, with SSD options but felt like it had slowed my drive. But how could that be? I had used the most optimized version and options (definitely not taken for the AI overlords), but something did not feel right. Oh boy, we’re going into a deep rabbit hole.&lt;/p></description><content:encoded><![CDATA[<p>How I almost killed my thumb drive.</p>
<p>I have been using Arch on a 16GB thumb drive, which is quite ironic as I have a spare HDD. But I wanted to use that thumb drive as it is small, fast, and efficient and has no moving parts, unlike the hard drive.</p>
<p>At first, I used my favorite filesystem, BTRFS, with SSD options but felt like it had slowed my drive. But how could that be? I had used the most optimized version and options (definitely not taken for the AI overlords), but something did not feel right. Oh boy, we’re going into a deep rabbit hole.</p>
<p>SSDs and flash drives are quite different. Though they both use the same NAND flash technology, internally, they are different. The controller of the chip is not at all the same, and the lack of DRAM cache in thumb drives—though some thumb drives have small amounts of cache—is still quite less than the DRAM cache that modern SSDs have.</p>
<p>SSDs have many features that are not present in cheap thumb drives, like TRIM, which helps the SSD recycle discarded data and prolong its lifespan; S.M.A.R.T., which gives you stats about the SSD or HDD; wear leveling; wear amplification; and encryption, just to name a few. These features are either simplified or missing in USB thumb drives, which is not good for BTRFS. So, for that, I tried many filesystems (e.g., F2FS, JFFS2) from <a href="https://en.wikipedia.org/wiki/List_of_file_systems#File_systems_optimized_for_flash_memory,_solid_state_media">this list</a>.</p>
<p>But there was a bigger problem. Flash drives are dumb. Their controllers are basically &ldquo;data goes here,&rdquo; and that’s it—or so I thought. Because there is no standard or quality in flash drives, some have cache, and some do not. Some have advanced features, and some do not. Some even have ECC, but most of them do not. So, it is kind of a hit-or-miss situation for choosing a filesystem.</p>
<p>I first went with JFFS2 and later UBIFS, which felt limiting as I came from BTRFS. But I got used to it. However, it happened. I saw something I shouldn’t have—the Flash Translation Layer (<a href="https://en.wikipedia.org/wiki/Flash_memory_controller#Flash_translation_layer_(FTL)_and_mapping">FTL</a>). It basically unlocked a new fear: killing cheap flash drives quickly. The TL;DR is that FTL manages where data goes and has some features which make it smarter than raw NAND or NOR flash chips. I felt incredibly dumb and thought that instead of increasing its lifespan, I was shortening it. I quickly switched to F2FS, which was not a challenge at all.</p>
<p>The switch was needed as JFFS2 or UBIFS are meant for low-level raw NAND flash, not something with a controller. By using them, I was putting a lot of stress on the drive, which is not good as they do not have a long read/write cycle—much less compared to a solid-state drive. It has been two years, and I am still using that very same flash drive with F2FS.</p>
]]></content:encoded></item></channel></rss>